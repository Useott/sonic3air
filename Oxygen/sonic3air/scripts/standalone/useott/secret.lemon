global u8 coldPeaksZone.sunrise = 0
global float coldPeaksZone.sunriseTransparency
global float coldPeaksZone.darknessTransparency
global float coldPeaksZone.surpriseflashTransparency

global u8 coldPeaksZone.skippedCPZ

global s8 coldPeaksZone.moonPos
global u8 coldPeaksZone.moonOffset

global u8 coldPeaksZone.levelMusic
global u8 coldPeaksZone.levelMusicK
global u8 coldPeaksZone.easterEgg

global float iceCapZone.teleporterCannon.warpTimer
global u16 iceCapZone.ringShooterTrail.y

global u8 coldPeaksZone.forceCPZ
global u8 coldPeaksZone.pickLevelMusic
global u8 coldPeaksZone.daytime
global u8 coldPeaksZone.daytimeK

#define COLD_PEAKS_ZONE = 0x0113 //Version 1.1.3

//# script-feature-level(1)

//# post-update-hook
function void PostFrameUpdate()
{
	if coldPeaksZone.sunrise == 1 && level.restart
		coldPeaksZone.sunrise = 0
	if Mods.isModActive("nighttime-launch-base-zone")
		coldPeaksZone.sunrise = 0
	if global.zone != 0x06 && global.zone != 0x05
		coldPeaksZone.skippedCPZ = 0
	if (!Game.isSecretUnlocked(0x13))
		coldPeaksZone.skippedCPZ = 1
	if u16[0xfffffe10] == 0x0600 && u8[0xfffffe24] < 7 && u8[0xffffb000 + 0x05] == 0x06
		Game.setSecretUnlocked(0x13)
	base.PostFrameUpdate()
	if global.zone == 0x05 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		System.loadExternalRawData("cpz_tiles_primary", 0x03D4296)
		System.loadExternalRawData("cpz_blocks_primary", 0x03D3FB6)
		System.loadExternalRawData("cpz_chunks_primary", 0x03D56A8)
		System.loadExternalRawData("cpz1_palette", 0x0A915C)
		System.loadExternalRawData("cpz1_tiles_secondary", 0x03D64C8)
		System.loadExternalRawData("cpz1_blocks_secondary", 0x03D5958)
		System.loadExternalRawData("cpz1_chunks_secondary", 0x03D844A)
		System.loadExternalRawData("cpz1_collision_alter", 0x279B60)
	}
	if global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		Renderer.enableDefaultPlane(2, false)

		if camera.position.x.u16 < 0x6023
		{
			coldPeaksZone.mechaTails.introTimer = 0
		}
		if coldPeaksZone.mechaTails.introTimer < 185
			++coldPeaksZone.mechaTails.introTimer
		if camera.position.x.u16 >= 0x6023
		{
			coldPeaksZone.mechaTailsStuff()
		}
		else
		{
			coldPeaksZone.mechaTails.hitsRemaining = 16
			coldPeaksZone.mechaTails.resultsTimer = 0
			coldPeaksZone.mechaTails.hasBeenFought = 0
			level.boss_encounter = 0
		}
		if level.restart && Audio.isPlayingAudio(0x19)
			playMusic(MUSIC_CTRL_STOP)
		if coldPeaksZone.mechaTails.hasBeenFought == 1
		{
			if (allocDynamicObjectStd()) && coldPeaksZone.mechaTails.resultsTimer == 90 && coldPeaksZone.mechaTails.position.y >= 0x0543
			{
				objA1.update_address = addressof(coldPeaksZone.callSignpost2)
				coldPeaksZone.mechaTails.resultsTimer += 1
				coldPeaksZone.sunrise = 1
				playMusic(MUSIC_CTRL_FADEOUT)
			}
			if coldPeaksZone.mechaTails.resultsTimer == 91 && level.wait_for_results
			{
				coldPeaksZone.mechaTails.resultsTimer += 1
			}
		}
		else if !(coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK))
		{
			coldPeaksZone.sunrise = 0
		}
		
		A0 = 0xffffb000
		coldPeaksZone.levelUpdate()
		Game.endSkippableCutscene()
		if (coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK)) == 1
		{
			if coldPeaksZone.sunrise == 1
			{
				coldPeaksZone.sunriseTransparency = 1
				if coldPeaksZone.darknessTransparency > 0
					coldPeaksZone.darknessTransparency -= 0.05
			}
			else
			{
				if coldPeaksZone.darknessTransparency < 1
					coldPeaksZone.darknessTransparency += 0.05
			}
			coldPeaksZone.moonOffset = 512
		}
		else
		{
			if coldPeaksZone.sunrise == 1 && camera.position.x.u16 > (0x5f74 - getScreenExtend() + 40)
			{
				if coldPeaksZone.sunriseTransparency < 1
					coldPeaksZone.sunriseTransparency += 0.0075
				if coldPeaksZone.darknessTransparency > 0
				{
					if u16[0xffffb000 + 0x10] >= 0x6588
						coldPeaksZone.darknessTransparency -= 0.05
					else coldPeaksZone.darknessTransparency -= 0.0075
				}
				if coldPeaksZone.moonOffset < 120
					coldPeaksZone.moonOffset += 1
			}
			else
			{
				coldPeaksZone.sunriseTransparency = 0
				coldPeaksZone.darknessTransparency = 1
				coldPeaksZone.moonOffset = 0
			}
		}
		if coldPeaksZone.surpriseflashTransparency > 0
		{
			if u16[0xffffb000 + 0x10] >= 0x6588
				coldPeaksZone.surpriseflashTransparency -= 0.05
			else coldPeaksZone.surpriseflashTransparency -= 0.0075
		}
	}
	if global.zone_act == 0x0501 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		TriggerNextZone(0x0500)
		isOnColdPeaksZone = 1
	}
	
	if global.zone == 0x06 && coldPeaksZone.skippedCPZ == 1
	{
		isOnColdPeaksZone = 0
	}
	
	if global.zone_act == 0x0600 && coldPeaksZone.skippedCPZ == 0
	{
		if !coldPeaksZone.destroyMechaTails()
		{
			string sheet = ColdPeaksZone.getBossSpriteSheet()
			SpriteHandle coldpeakszone.mechatails = Renderer.addSpriteHandle(stringformat("coldPeaksZone.%s.cutscene.1", sheet), 0x0070, 0x05b8, 0x9f00)
			coldpeakszone.mechatails.setFlags(0x20)
			coldpeakszone.mechatails.setPaletteOffset(0xe0)
			coldpeakszone.mechatails.setFlipY(1)
		}
		startedLBZ1Fade = false
		LBZ1FadeProgress = 0x00
		startedLBZ2Fade = false
		LBZ2FadeProgress = 0x00
	}
}

//# address-hook(0x200418)
function void coldPeaksZone.ICZ2TeleporterCannonObjectUpdate()
{
	if (!Game.isSecretUnlocked(0x13))
	{
		coldPeaksZone.skippedCPZ = 1
		return
	}
	
	objA0.box_size.x = 0x50
	objA0.box_size.y = 0x50
	DrawObject()
	
	CheckGroundCollision()
	if D1.s16 < -3
		objA0.position.y.u16 -= 6
	if D1.s16 > 3
		objA0.position.y.u16 += 6
	
	CheckDistanceToPlayers()
	
	if D2.u16 < 8 && D3.u16 > 0x4a && D3.u16 < 0x60 && objA1.velocity.y > 0
	{
		objA0.value26 = 1
	}
	
	coldPeaksZone.skippedCPZ = 1
	if objA0.value26 == 1 && objA1.position.y.u16 > objA0.position.y.u16 - 36
	{
		objA1.velocity.x = 0
		objA1.velocity.y = 0
		objA1.state = char.state.DISAPPEARED
		objA0.value32 += 1
		
		if objA0.value32 == 80 || objA0.value32 == 40 || objA0.value32 == 2
			playSound(0xa7)
		if objA0.value32 == 120
			playSound(0xad)
		if objA0.value32 == 135
		{
			coldPeaksZone.skippedCPZ = 0
			TriggerNextZone(0x0600)
		}
	}
	else
	{
		objA0.value32 = 0
		coldPeaksZone.skippedCPZ = 1
	}
	if level.results_done == 0xff && objA1.position.x.u16 > objA0.position.x.u16 - 200
	{
		player1.control_override = 0xff
		if objA1.position.x.u16 < objA0.position.x.u16 - 7
			control.player1.state = CONTROL_RIGHT
		else if objA1.position.x.u16 > objA0.position.x.u16 + 7
			control.player1.state = CONTROL_LEFT
		else if (objA1.position.x.u16 > objA0.position.x.u16 - 7 && objA1.position.x.u16 < objA0.position.x.u16 + 7 && objA0.value26 == 0)
		{
			if !(objA1.flags2a & char.flag.IN_AIR) && objA1.velocity.x == 0
			{
				control.player1 = 0x2020
			}
			else if (objA1.flags2a & char.flag.IN_AIR) && objA1.velocity.y != 0
			{
				control.player1 = 0x2000
			}
			else control.player1.state = 0x00
		}
	}
}

//# address-hook(0x08657a) end(0x0865cc)
function void fn08657a()
{
	base.fn08657a()
	if (allocDynamicObjectStd()) && global.zone_act == 0x0501
	{
		objA1.update_address = addressof(coldPeaksZone.ICZ2TeleporterCannonObjectUpdate)
		objA1.position.x.u16 = 0x46b5
		objA1.position.y.u16 = objA0.position.y.u16
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
	}
}

//# address-hook(0x085e3a) end(0x085e50)
function void TriggerNextZone()
{
	if global.zone == 0x05 && customZoneSelect.alternateZoneSet == 0 && coldPeaksZone.skippedCPZ == 1
	{
		isOnColdPeaksZone = 0
		#if CZS_ACTIVE
		D0.u16 = Game.onTriggerNextZone(D0.u16) + 0x0100
		#else
		D0.u16 = Game.onTriggerNextZone(D0.u16)
		#endif
	}
	base.TriggerNextZone()
}

//# address-hook(0x02dcca)
function void LevelResults.AdvanceToNextAct()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		if (level.restart)
		{
			// Fix "frame-perfect reset" bug, but only for highest level of glitch fix setting
			if (Game.getSetting(SETTING_FIX_GLITCHES) >= 2)
			{
				UnloadObject()
				return
			}
		}

		if (objA0.countdown_value != 0)
		{
			--objA0.countdown_value
			return
		}

		if (u16[A0 + 0x30] != 0)
		{
			++objA0.value32
			return
		}

		level.wait_for_results = 0

		Standalone.onLevelFinished()
		
		global.act.apparent = 1
		
		// Show title card for Act 2
		objA0.update_address = addressof(TitleCard.Update)
		objA0.base_state = 0
		u8[A0 + 0x3e] = 0xff

		Standalone.onLevelStart()
		
		if (global.zone == 0x05 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0)
		{
			level.results_done = 0xff
			chooseFittingMusic()
			stopCharacterWinPose(0xffffb000)
			stopCharacterWinPose(0xffffb04a)
			return
		}
	}
	else base.LevelResults.AdvanceToNextAct()
}

//# address-hook(0x053740) end(0x053740)
//# address-hook(0x053886) end(0x05393c)
function void ICZ1.TransitionToOutdoorArea()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
	}
	else base.ICZ1.TransitionToOutdoorArea()
}

//# address-hook(0x053d5c) end(0x053d5c)
//# address-hook(0x053d68) end(0x053d74)
function void fn053d68()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
	}
	else base.fn053d68()
}

//# address-hook(0x05382c) end(0x053882)
function void fn05382c()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		UpdateBackgroundScrolling.ICZ1.Indoors()
		UpdateBackgroundTiles.General()
		WriteScrollOffsets()
	}
	else base.fn05382c()
}

//# address-hook(0x053724) end(0x053728)
function void UpdateLevelScrolling.ICZ1()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		//How DEZ does it
		Renderer.enableDefaultPlane(0, false)
		coldPeaksZone.renderBackground()
	}
	base.UpdateLevelScrolling.ICZ1()
}

//# address-hook(0x23e1aa) end(0x23e1d8)
function void fn23e1aa()
{
	if (coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK))
		base.fn23e1aa()
	else fn23e20e()
}

//# address-hook(0x071440) end(0x071440)
function void fn071440()
{
	if (coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK))
		base.fn071440()
}

//# address-hook(0x01bc60) end(0x01bcc2)
//# alias(fn01bc60) deprecated
function void Level.SetupLevelSize()
{
	if global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		u8[0xffffee30] = 0
		u8[0xffffee08] = 0
		player1.camera_lock = 0
		player2.camera_lock = 0
		u8[0xffffee39] = 0
		camera.update_routine = 0
		outro.wait_time = 0
		u16[0xfffff662] = 0

		A0 = 0x01bcc6 + global.zone * 16 + global.act * 8
		u16 minX = u16[A0]
		u16 maxX = 0x6bf0
		u16 minY = u16[A0+4]
		u16 maxY = u16[A0+6]

		move_area.left = minX
		move_area.right = maxX
		move_area.left.target = minX
		move_area.right.target = maxX
		move_area.left.player2 = minX
		move_area.right.player2 = maxX

		level.vertical_wrap = minY
		move_area.bottom.current = maxY
		move_area.top.target = minY
		move_area.bottom.target = maxY
		level.vertical_wrap.player2 = minY
		move_area.bottom.current.player2 = maxY

		camera.yoffset.player = 0x60
		camera.yoffset.tails = 0x60
		level.width.bitmask = 0xffff
		level.height.bitmask = 0xffff
		SetupCharacterAtStartPosition_ColdPeaksZone()
	}
	else base.Level.SetupLevelSize()
}

function void SetupCharacterAtStartPosition_ColdPeaksZone()
{
	if (checkpoint.number != 0)
	{
		SetupCharacterAtLastCheckpoint()
		D1.u16 = u16[0xffffb000 + 0x10]
		D0.u16 = u16[0xffffb000 + 0x14]
	}
	else
	{
		u16[0xffffb000 + 0x10] = 0x0780
		if getMainCharacter() == CHARACTER_KNUCKLES
		{
			u16[0xffffb000 + 0x14] = 0x0000
			camera.position.y.u16 = 0x0000
		}
		else
		{
			u16[0xffffb000 + 0x14] = 0x0385
			camera.position.y.u16 = 0x0300
		}
		camera.position.x.u16 = 0x06c3
		u16[0xffffb04a + 0x10] = 0x0000
		u16[0xffffb04a + 0x14] = 0x0000
		fn044a0c()
		return
	}
}

//# address-hook(0x053608) end(0x05365e)
function void InitLevelTiles.ICZ1()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		level.height.bitmask = 0x07ff
		level.height.tilemask = 0x07f0
		level.chunksize.bitmask = 0x3c
		Level.GetCameraPosition()
		Level.InitialTilesFill()
	}
	else base.InitLevelTiles.ICZ1()
}

global bool coldPeaksZone.loadedPatterns

//Change stuff to make it work properly
function void coldPeaksZone.levelUpdate()
{
	if global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		if timer.seconds < 1 && global.act.apparent == 0
		{
			if char.state == char.state.DISAPPEARED
			{
				if global.framecounter % 2 == 0
				{
					SpriteHandle iceCapZone.ringShooterTrail = Renderer.addSpriteHandle("icecapzone_ringshooter_trail", u16[0xffffb000 + 0x10], u16[0xffffb000 + 0x14], 0x9e00)
					iceCapZone.ringShooterTrail.setFlags(0x20)
				}
				if level.framecounter & 0x05
					playSound(0xca)
			}
			else player1.control_override = 0x00
		}
		if timer.alldata > 2 && timer.alldata < 5 && global.act.apparent == 0
		{
			char.state = char.state.DISAPPEARED
			char.flags |= char.flag.IN_AIR
			char.velocity.x = 0
			char.velocity.y = 0x1000
			player1.control_override = 0xff
			if getMainCharacter() != CHARACTER_KNUCKLES
				char.flags |= char.flag.FACING_LEFT
		}
		if camera.position.x.u16 < 0x0200 && camera.position.y.u16 < 0x00e4
		{
			move_area.bottom.current = 0x0028
			move_area.bottom.target = 0x0028
		}
		else if camera.position.x.u16 > 0x5852 && camera.position.x.u16 < 0x61f0
		{
			move_area.bottom.target = 0x0490
			move_area.bottom.current = 0x0490
		}
		else if camera.position.x.u16 >= 0x61f0 && camera.position.x.u16 < 0x68ad
		{
			move_area.bottom.target = 0x0630
			move_area.bottom.current = 0x0630
		}
		else if camera.position.x.u16 >= 0x68ad
		{
			move_area.bottom.target = 0x02e0
			move_area.bottom.current = 0x02e0
		}
		else
		{
			move_area.bottom.target = 0x06c0
			move_area.bottom.current = 0x06c0
		}
		level.vertical_wrap = 0
		level.vertical_wrap.player2 = 0
		
		if camera.position.x.u16 >= 0x6500 && coldPeaksZone.loadedPatterns == 0
		{
			coldPeaksZone.loadedPatterns = 1
			fn02f77c()
			coldPeaksZone.spawnMechaTailsCutsceneObject()
			StartLoadingPatternsForZone()
		}
		if camera.position.x.u16 < 0x6500
			coldPeaksZone.loadedPatterns = 0
	}
}

//This takes care of more than the custom background.
function void coldPeaksZone.renderBackground()
{
	coldPeaksZone.skippedCPZ = 0
	
	string cameo = stringformat("coldpeakszone.cameo.%d", (global.framecounter / 600) % 24 + 1)
	
	SpriteHandle coldpeakszone.cameo = Renderer.addSpriteHandle(cameo, 320, 144, 0xc001)
	coldpeakszone.cameo.setFlags(0x20|0x40)
	
	string cameo2 = stringformat("coldpeakszone.cameo2.%d", (global.framecounter / 600) % 14 + 1)
	
	SpriteHandle coldpeakszone.cameo2 = Renderer.addSpriteHandle(cameo2, 0x67c8, 0x0688, 0xc001)
	coldpeakszone.cameo2.setFlags(0x20|0x40)
	
	SpriteHandle coldpeakszone.darkness = Renderer.addSpriteHandle("coldpeakszone_darkness", 0, 0, 0x1002)
	coldpeakszone.darkness.setFlags(0x40|0x80)
	coldpeakszone.darkness.setBlendMode(3)
	coldpeakszone.darkness.setOpacity(coldPeaksZone.darknessTransparency)

	SpriteHandle coldpeakszone.darkness2 = Renderer.addSpriteHandle("coldpeakszone_darkness", 0, 0, 0x9d7f)
	coldpeakszone.darkness2.setFlags(0x40|0x80)
	coldpeakszone.darkness2.setBlendMode(4)
	coldpeakszone.darkness2.setOpacity(coldPeaksZone.darknessTransparency)
	if global.zone_act == 0x0500
	{
		s8 coldpeakszone.bgtrees.x = -(camera.position.x.u16 / 3)
		s8 coldpeakszone.bgtreesclose.x = -(camera.position.x.u16 / 2)
		s8 coldpeakszone.bgtreesfar.x = -(camera.position.x.u16 / 4)
		s8 coldpeakszone.bgsky.x = -(camera.position.x.u16 / 24)
		s16 coldpeakszone.bgangelisland.x = 0 -(camera.position.x.u16 / 16) + getScreenExtend() + 1620
		s8 coldpeakszone.bgclouds.x = -(camera.position.x.u16 / 5)
		
		s8 coldpeakszone.bgcavefloor1.x = -(camera.position.x.u16 / 2)
		s8 coldpeakszone.bgcaveclose.x = -(camera.position.x.u16 / 3)
		s8 coldpeakszone.bgcavefloor2.x = -(camera.position.x.u16 / 4)
		s8 coldpeakszone.bgcavefar.x = -(camera.position.x.u16 / 6)
		
		s8 coldpeakszone.bgcave.y = -(camera.position.y.u16 / 2)
		s16 coldpeakszone.bgtrees.y = -(camera.position.y.u16 / 2)
		s16 coldpeakszone.bgtrees.y.2 = -(camera.position.y.u16 / 2)
		s16 coldpeakszone.bgbeach.y = -(camera.position.y.u16 / 2)
		coldPeaksZone.moonPos = -(0x608b / 2) + (coldPeaksZone.moonOffset / 9)
		
		string piranha.key = stringformat("coldpeakszone_piranhaplant_%d", (global.framecounter / 6) % 2 + 1)
		SpriteHandle coldpeakszone.piranha1 = Renderer.addSpriteHandle(piranha.key, 0x25b8, 0x0668, 0x9f00)
		coldpeakszone.piranha1.setCoordinateSpace(1)
		SpriteHandle coldpeakszone.piranha2 = Renderer.addSpriteHandle(piranha.key, 0x5fb8, 0x0398, 0x9f00)
		coldpeakszone.piranha2.setCoordinateSpace(1)
		coldpeakszone.piranha2.setFlipY(1)
		
		if (camera.position.x.u16 > 0x17a1 && camera.position.x.u16 < 0x26a1) || (camera.position.x.u16 > 0x3ca1 && camera.position.x.u16 < 0x446f) || (camera.position.x.u16 >= 0x446f && camera.position.x.u16 < 0x4d21 && camera.position.y.u16 < 0x05a1)
		{
			if (coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK)) == 1
				coldPeaksZone.sunrise = 1
			
			//I dislike these functions, but I'll have to use them here for stable build support.
			Renderer.drawSprite("coldpeakszone_bg-trees-daytime", coldpeakszone.bgtrees.x, 0, 0x00, 0, 0x1001, 0, Math.roundToInt(coldPeaksZone.sunriseTransparency * 0xff))
			Renderer.drawSprite("coldpeakszone_bg-sky-daytime", coldpeakszone.bgsky.x, 0, 0x00, 0, 0x1001, 0, Math.roundToInt(coldPeaksZone.sunriseTransparency * 0xff))
			
			Renderer.drawSprite("coldpeakszone_bg-trees", coldpeakszone.bgtrees.x, 0, 0, 0, 0x1000)
			Renderer.drawSprite("coldpeakszone_bg-clouds", coldpeakszone.bgclouds.x, 0, 0, 0, 0x1000)
			Renderer.drawSprite("coldpeakszone_bg-moon", getScreenExtend(), 0, 0x00, 0, 0x1000)
			SpriteHandle coldpeakszone.bgmoon.clouds = Renderer.addSpriteHandle("coldpeakszone_bg-moon-clouds", getScreenExtend(), 0, 0x1000)
			coldpeakszone.bgmoon.clouds.setBlendMode(3)
			Renderer.drawSprite("coldpeakszone_bg-sky", coldpeakszone.bgsky.x, 0, 0x00, 0, 0x1000)
		}
		else if camera.position.x.u16 > 0x5a21 && camera.position.y.u16 < 0x0540
		{
			if (coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK)) == 1
				coldPeaksZone.sunrise = 1
			coldpeakszone.bgcave.y = -(0x608b / 2)
			
			coldpeakszone.bgtrees.y = -((0x0490 + camera.position.y.u16) / 5) + 388
			coldpeakszone.bgtrees.y.2 = -((0x0490 + camera.position.y.u16) / 8) + 196
			coldpeakszone.bgbeach.y = -((0x0490 + camera.position.y.u16) / 12) + 228
			//Ending trees
			SpriteHandle coldpeakszone.bgtreesclose.daytime = Renderer.addSpriteHandle("coldpeakszone_bg-trees-close-daytime", coldpeakszone.bgtreesclose.x, coldpeakszone.bgtrees.y, 0x1000)
			coldpeakszone.bgtreesclose.daytime.setOpacity(coldPeaksZone.sunriseTransparency)
			SpriteHandle coldpeakszone.bgtreesclose = Renderer.addSpriteHandle("coldpeakszone_bg-trees-close", coldpeakszone.bgtreesclose.x, coldpeakszone.bgtrees.y, 0x1000)
			SpriteHandle coldpeakszone.bgtreesfar.daytime = Renderer.addSpriteHandle("coldpeakszone_bg-trees-far-daytime", coldpeakszone.bgtreesfar.x, coldpeakszone.bgtrees.y.2, 0x1000)
			coldpeakszone.bgtreesfar.daytime.setOpacity(coldPeaksZone.sunriseTransparency)
			SpriteHandle coldpeakszone.bgtreesfar = Renderer.addSpriteHandle("coldpeakszone_bg-trees-far", coldpeakszone.bgtreesfar.x, coldpeakszone.bgtrees.y.2, 0x1000)
			SpriteHandle coldpeakszone.bgbeach.daytime = Renderer.addSpriteHandle("coldpeakszone_bg-beach-daytime", coldpeakszone.bgtreesfar.x, coldpeakszone.bgbeach.y, 0x1000)
			coldpeakszone.bgbeach.daytime.setOpacity(coldPeaksZone.sunriseTransparency)
			SpriteHandle coldpeakszone.bgbeach = Renderer.addSpriteHandle("coldpeakszone_bg-beach", coldpeakszone.bgtreesfar.x, coldpeakszone.bgbeach.y, 0x1000)
			
			if getMainCharacter() != CHARACTER_KNUCKLES
			{
				//Ending Angel Island
				SpriteHandle coldpeakszone.bgangelisland = Renderer.addSpriteHandle("coldpeakszone_bg-angelisland",  coldpeakszone.bgangelisland.x, coldpeakszone.bgcave.y, 0x1000)
				coldpeakszone.bgangelisland.setOpacity(coldPeaksZone.sunriseTransparency)
				SpriteHandle coldpeakszone.bgangelisland.night = Renderer.addSpriteHandle("coldpeakszone_bg-angelisland-night", coldpeakszone.bgangelisland.x, coldpeakszone.bgcave.y, 0x1000)
			}
			else
			{
				SpriteHandle coldpeakszone.bgangelisland = Renderer.addSpriteHandle("coldpeakszone_bg-angelisland-sky",  coldpeakszone.bgangelisland.x, coldpeakszone.bgcave.y, 0x1000)
				coldpeakszone.bgangelisland.setOpacity(coldPeaksZone.sunriseTransparency)
				SpriteHandle coldpeakszone.bgangelisland.night = Renderer.addSpriteHandle("coldpeakszone_bg-angelisland-sky-night",  coldpeakszone.bgangelisland.x, coldpeakszone.bgcave.y, 0x1000)
			}
			
			//Daytime sky
			SpriteHandle coldpeakszone.bgsky.ending.daytime = Renderer.addSpriteHandle("coldpeakszone_bg-sky-ending-daytime", coldpeakszone.bgsky.x, coldpeakszone.bgcave.y, 0x1000)
			coldpeakszone.bgsky.ending.daytime.setOpacity(coldPeaksZone.sunriseTransparency)
			
			if getMainCharacter() != CHARACTER_KNUCKLES
			{
				//Ending Angel Island's shadow during night
				SpriteHandle coldpeakszone.bgangelisland.nightshadow = Renderer.addSpriteHandle("coldpeakszone_bg-angelisland-nightshadow", coldpeakszone.bgangelisland.x, coldpeakszone.bgcave.y, 0x1000)
			}
			
			//The rest of the BG
			SpriteHandle coldpeakszone.bgmoon.ending = Renderer.addSpriteHandle("coldpeakszone_bg-moon-ending", getScreenExtend(), coldPeaksZone.moonPos, 0x1000)
			SpriteHandle coldpeakszone.bgmoon2.ending = Renderer.addSpriteHandle("coldpeakszone_bg-moon2-ending", getScreenExtend(), coldpeakszone.bgcave.y - (coldPeaksZone.moonOffset / 9), 0x1000)
			SpriteHandle coldpeakszone.bgsky.ending = Renderer.addSpriteHandle("coldpeakszone_bg-sky-ending", coldpeakszone.bgsky.x, coldpeakszone.bgcave.y, 0x1000)
		}
		else
		{
			if (coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK)) == 1
				coldPeaksZone.sunrise = 0
			SpriteHandle coldpeakszone.bgcavefloor1 = Renderer.addSpriteHandle("coldpeakszone_bg-cavefloor1", coldpeakszone.bgcavefloor1.x, coldpeakszone.bgcave.y, 0x1000)
			SpriteHandle coldpeakszone.bgcaveclose = Renderer.addSpriteHandle("coldpeakszone_bg-caveclose", coldpeakszone.bgcaveclose.x, coldpeakszone.bgcave.y, 0x1000)
			SpriteHandle coldpeakszone.bgcavefloor2 = Renderer.addSpriteHandle("coldpeakszone_bg-cavefloor2", coldpeakszone.bgcavefloor2.x, coldpeakszone.bgcave.y, 0x1000)
			SpriteHandle coldpeakszone.bgcavefar = Renderer.addSpriteHandle("coldpeakszone_bg-cavefar", coldpeakszone.bgcavefar.x, coldpeakszone.bgcave.y, 0x1000)
		}
	}
}

//# address-hook(0x053a4c) end(0x053ad2)
function void fn053a4c()
{
	if (global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0)
		UnloadObject()
	else base.fn053a4c()
}

//# address-hook(0x0539ac) end(0x053a0c)
function void fn0539ac()
{
	if !(global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0)
		base.fn0539ac()
}

function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
	u8 pickDaytime
	if coldPeaksZone.pickLevelMusic == 0
		pickDaytime = (coldPeaksZone.daytime || (getMainCharacter() == CHARACTER_KNUCKLES && coldPeaksZone.daytimeK))
	else if coldPeaksZone.pickLevelMusic == 1
		pickDaytime = 1
	else pickDaytime = 0
	
    if global.zone_act == 0x0500 && (sfxId == 0x0b || sfxId == 0x0c) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 
    {
		if coldPeaksZone.levelMusic == 0 && getMainCharacter() != CHARACTER_KNUCKLES|| (coldPeaksZone.levelMusicK == 0 && getMainCharacter() == CHARACTER_KNUCKLES) || (coldPeaksZone.levelMusic == 0 && coldPeaksZone.levelMusicK == 4 && getMainCharacter() == CHARACTER_KNUCKLES)
		{
			if ((coldPeaksZone.sunrise == 1 && camera.position.x.u16 > (0x5f74 - getScreenExtend() + 40)) || pickDaytime) && coldPeaksZone.pickLevelMusic != 2
			{
				if coldPeaksZone.pickLevelMusic == 3
					return "pkmndp_route216night"
				return "pkmndp_route216day"
			}
			else
			{
				if coldPeaksZone.pickLevelMusic == 3
					return "pkmndp_route216day"
				return "pkmndp_route216night"
			}
		}
		else if coldPeaksZone.levelMusic == 1 && getMainCharacter() != CHARACTER_KNUCKLES|| (coldPeaksZone.levelMusicK == 1 && getMainCharacter() == CHARACTER_KNUCKLES) || (coldPeaksZone.levelMusic == 1&& coldPeaksZone.levelMusicK == 4 && getMainCharacter() == CHARACTER_KNUCKLES)
		{
			if ((coldPeaksZone.sunrise == 1 && camera.position.x.u16 > (0x5f74 - getScreenExtend() + 40)) || pickDaytime) && coldPeaksZone.pickLevelMusic != 2
			{
				if coldPeaksZone.pickLevelMusic == 3
					return "thf_sukarabefight3"
				return "thf_sukarabefight1"
			}
			else
			{
				if coldPeaksZone.pickLevelMusic == 3
					return "thf_sukarabefight1"
				return "thf_sukarabefight3"
			}
		}
		else if coldPeaksZone.levelMusic == 2 && getMainCharacter() != CHARACTER_KNUCKLES || (coldPeaksZone.levelMusicK == 2 && getMainCharacter() == CHARACTER_KNUCKLES) || (coldPeaksZone.levelMusic == 2 && coldPeaksZone.levelMusicK == 4 && getMainCharacter() == CHARACTER_KNUCKLES)
		{
			if ((coldPeaksZone.sunrise == 1 && camera.position.x.u16 > (0x5f74 - getScreenExtend() + 40)) || pickDaytime) && coldPeaksZone.pickLevelMusic != 2
			{
				if coldPeaksZone.pickLevelMusic == 3
					return "sa3_twinklesnow1"
				return "sa1_icemountain1"
			}
			else
			{
				if coldPeaksZone.pickLevelMusic == 3
					return "sa1_icemountain1"
				return "sa3_twinklesnow1"
			}
		}
		else if coldPeaksZone.levelMusic == 3 && getMainCharacter() != CHARACTER_KNUCKLES || (coldPeaksZone.levelMusicK == 3 && getMainCharacter() == CHARACTER_KNUCKLES) || (coldPeaksZone.levelMusic == 3 && coldPeaksZone.levelMusicK == 4 && getMainCharacter() == CHARACTER_KNUCKLES)
		{
			return "rockman487s_custom_theme"
		}
    }
	if global.zone_act == 0x0500 && (sfxId == 0x19) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
    {
		if coldPeaksZone.mechaTails.hitsRemaining < 5
			return "3db_boss2"
		else return "3db_boss1"
    }
    return base.Standalone.getModdedSoundKey(soundKey, sfxId, soundRegType)
}

//# address-hook(0x23de96) end(0x23dec4)
function void fn23de96()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		u8[0xffffeee8] = 0xff
		fn23dec6()
	}
	else base.fn23de96()
}

//# address-hook(0x039b66) end(0x039c4e)
function void fn039b66()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		move_area.left = 0x0000
		objA0.update_address = 0x039676
		u8[A2 + 0x2e] = 0
	}
	else base.fn039b66()
}

//# address-hook(0x05366a) end(0x05366a)
//# address-hook(0x053682) end(0x05369e)
function void fn053682()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		fn053672()
	}
	else base.fn053682()
}

//# address-hook(0x0393ee) end(0x039434)
function void fn0393ee()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		objA0.update_address = 0x039676
		u8[A2 + 0x2e] = 0
		tails.ai_routine = 0x0006
		tails.respawn_counter = 0
	}
	else base.fn0393ee()
}

//# address-hook(0x053ad4) end(0x053b9c)
function void fn053ad4()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		
	}
	else base.fn053ad4()
}

//# address-hook(0x010bba) end(0x010c8e)
function void Character.UpdateNormalState.Sonic()
{
	coldPeaksZone.moonwalk()
	base.Character.UpdateNormalState.Sonic()
}

//# address-hook(0x0137c4) end(0x0138f4)
function void Character.UpdateNormalState.Tails()
{
	if getMainCharacter() == CHARACTER_TAILS
		coldPeaksZone.moonwalk()
	base.Character.UpdateNormalState.Tails()
}

//# address-hook(0x01656c) end(0x016640)
function void Character.UpdateNormalState.Knuckles()
{
	coldPeaksZone.moonwalk()
	base.Character.UpdateNormalState.Knuckles()
}

global u8 coldPeaksZone.minMoonwalkDelay

function void coldPeaksZone.moonwalk()
{
	if coldPeaksZone.easterEgg == 0
		return
	if global.zone_act == 0x0500
	{
		if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && !(super.active) && !(super.active.tails) && !(char.bonus_effect & char.bonus.SPEED_UP)
		{
			if control.player1 == 0x0c00 && char.flags == char.flag.FACING_LEFT
			{
				global.move.acceleration = 0x0200
				global.move.deceleration = 0x1000
				if getMainCharacter() == CHARACTER_TAILS
				{
					global.move.acceleration.tails = 0x0200
					global.move.deceleration.tails = 0x1000
				}
			}
			else if control.player1 != 0x0c00 && char.flags == char.flag.FACING_LEFT
			{
				global.move.acceleration = 0x000c
				global.move.deceleration = 0x0080
				if getMainCharacter() == CHARACTER_TAILS
				{
					global.move.acceleration.tails = 0x000c
					global.move.deceleration.tails = 0x0080
				}
			}
			if global.move.acceleration == 0x0200 && !(char.flags == char.flag.FACING_LEFT)
				global.move.acceleration = 0x0001
			if global.move.acceleration = 0x0006
				global.move.acceleration = 0x000c
			
			if getMainCharacter() == CHARACTER_TAILS
			{
				if global.move.acceleration.tails == 0x0200 && !(char.flags == char.flag.FACING_LEFT)
					global.move.acceleration.tails = 0x0001
				if global.move.acceleration.tails = 0x0006
					global.move.acceleration.tails = 0x000c
			}
		}
		if control.player1 == 0x0c00 && char.flags == char.flag.FACING_LEFT
		{
			if coldPeaksZone.minMoonwalkDelay < 10
				coldPeaksZone.minMoonwalkDelay += 1
			if !(Audio.isPlayingAudio("mjmw_billiejean")) && !(level.boss_encounter == 1) && coldPeaksZone.minMoonwalkDelay == 10
			{
				Audio.playAudio("mjmw_billiejean", 0)
			}
		}
		else if control.player1 != 0x0c00 && char.flags == char.flag.FACING_LEFT
		{
			if Audio.isPlayingAudio("mjmw_billiejean")
			{
				coldPeaksZone.minMoonwalkDelay = 0
				chooseFittingMusic()
			}
		}
		if Audio.isPlayingAudio("mjmw_billiejean") && !char.flags == char.flag.FACING_LEFT
		{
			coldPeaksZone.minMoonwalkDelay = 0
			chooseFittingMusic()
		}
	}
}

function void chooseFittingMusic()
{
	if (level.boss_encounter == 1) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		if coldPeaksZone.mechaTails.hitsRemaining < 5
			Audio.playAudio("3db_boss2", 0)
		else Audio.playAudio("3db_boss1", 0)
	}
	else base.chooseFittingMusic()
}

function bool Standalone.onDrawVdpSpriteCompound(s16 px, s16 py, u8 size, u16 index, u16 renderQueue, u8 spriteCounter)
{
	if (objA0.update_address == 0x03887c) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		Renderer.drawCustomSprite("coldpeakszone_bridge", px, py, 0x00, (objA0.sprite_attributes & sprite_attribute.PRIORITY), 0x9d7e)
		return true
	}
	return base.Standalone.onDrawVdpSpriteCompound(px, py, size, index, renderQueue, spriteCounter)
}

function bool Standalone.onDrawVdpSprite(s16 px, s16 py, u8 size, u16 index, u16 renderQueue)
{
	s8 i = 0
	string key = "coldpeakszone_collapsingbridge"
	bool flip
	if index == 0x4001 || index == 0x4801
		key = "coldpeakszone_collapsingbridge2"
	if index == 0x4009
		i = 2
	if index == 0x4011
		i = 4
	if index >= 0x4801
		flip = true
	
	if (objA0.update_address == 0x020594) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		if index == 0x4001 || index == 0x4009 || index == 0x4011 || index == 0x4801 || index == 0x4809 || index == 0x4811
			Renderer.drawCustomSprite(key, px - (flip ? -i : i) + (flip ? 0 : 32), py, 0x00, flip ? 0 : 0x01, 0x9d7e)
		return true
	}
	if (objA0.update_address == 0x0205ce || objA0.update_address == 0x0205de || objA0.update_address == 0x020620) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		if index == 0x4001 || index == 0x4009 || index == 0x4011 || index == 0x4801 || index == 0x4809 || index == 0x4811
			Renderer.drawCustomSprite(key, px - (flip ? -i : i) + (flip ? -16 : 32), py, 0x00, flip ? 0 : 0x01, 0x9d7e)
		return true
	}
	return base.Standalone.onDrawVdpSprite(px, py, size, index, renderQueue)
}

//# address-hook(0x0234e6) end(0x0235cc)
//# alias(fn0234e6) deprecated
function void SpringDiagonal.ApplyToCharacter()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		if ((objA0.flags2a & 0x01) == 0)
		{
			D0.u16 = objA0.position.x.u16 - 4
			if (D0.u16 >= objA1.position.x.u16)
				return
			
			if objA1.velocity.x < 0x400
				return
		}
		else
		{
			D0.u16 = objA0.position.x.u16 + 4
			if (D0.u16 < objA1.position.x.u16)
				return
		}
		
		objA0.state.both = 0x0500
		objA1.velocity.y = -0x600
		objA1.position.y.u16 += 6
		if ((objA0.flags2a & 0x01) == 0)
		{
			objA1.flags2a &= ~char.flag.FACING_LEFT
			objA1.position.x.u16 -= 6
			if objA1.velocity.x < 0x570
				objA1.velocity.x = 0x500
		}
		else
		{
			objA1.flags2a |= char.flag.FACING_LEFT
			objA1.position.x.u16 += 6
			if objA1.velocity.x > -0x570
				objA1.velocity.x = -0x500
		}

		u8[A1 + 0x05] = base_state.NORMAL
		objA1.state = char.state.STRAIGHTJUMP
		objA1.flags2a |= char.flag.IN_AIR
		objA1.flags2a &= ~char.flag.ON_OBJECT
		u8[A1 + 0x40] = 0

		if (objA0.subtype2c & 0x01)
		{
			u8[A1 + 0x20] = 0
			u8[A1 + 0x30] = (objA0.subtype2c & 0x02) ? 1 : 3		// "char.rotation.x.count"
			u8[A1 + 0x31] = 8										// "char.rotation.x.speed"

			if (u8[A1 + 0x2a] & char.flag.FACING_LEFT)
			{
				s8[A1 + 0x27] = -1		// Set x-rotation of character
				objA1.groundspeed = -1
			}
			else
			{
				s8[A1 + 0x27] = 1		// Set x-rotation of character
				objA1.groundspeed = 1
			}
		}

		D0.u8 = objA0.subtype2c & 0x0c
		if (D0.u8 == 0x04)
		{
			u8[A1 + 0x46] = 0x0c
			u8[A1 + 0x47] = 0x0d
		}
		if (D0.u8 == 0x08)
		{
			u8[A1 + 0x46] = 0x0e
			u8[A1 + 0x47] = 0x0f
		}
	}
	else base.SpringDiagonal.ApplyToCharacter()
}

function void SpringDiagonal.updateInternal(bool flipY)
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		for (u8 characterIndex = 0; characterIndex < 2; ++characterIndex)
		{
			A1 = 0xffffb000 + characterIndex * 0x4a
			if objA1.velocity.x < 0x400
			{
				
			}
			else base.SpringDiagonal.updateInternal(flipY)
		}
	}
	else base.SpringDiagonal.updateInternal(flipY)
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.update_address == 0x023490 && objA0.subtype2c == 0x33) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
		return true
	if objA0.update_address == 0x0398a6 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
		return true
	if objA0.update_address == 0x08a280 && objA0.subtype2c == 0 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		Renderer.drawCustomSprite("coldpeakszone_knuxwall", px, py, 0x00, objA0.render_flags, renderQueue)
		return true
	}
	if objA0.update_address == 0x08a44a && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		Renderer.drawCustomSprite("coldpeakszone_unbreakwall", px, py, 0x00, objA0.render_flags, renderQueue)
		Renderer.drawCustomSprite("coldpeakszone_unbreakwall", px, py - 128, 0x00, objA0.render_flags, renderQueue)
		return true
	}
	if objA0.update_address == 0x08a258 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		Renderer.drawCustomSprite("coldpeakszone_walldebris", px, py, 0x00, objA0.render_flags, 0x9d7e)
		return true
	}
	if objA0.update_address == 0x200418
	{
		u16 rq = objA0.value26 ? 0x9f00 : 0x9eff
		Renderer.drawCustomSprite("icecapzone_teleportercannon", px, py - 37, 0x20, 0, rq)
		
		string key
		if ((240 - objA0.value32) / 60) < 4
			key = stringformat("icecapzone_teleporter_countdown%d", (240 - Math.roundToInt(objA0.value32)) / 60)
		else key = "icecapzone_teleporter_countdown4"
		if global.framecounter % 2 == 0
			Renderer.drawCustomSprite(key, px - 50, py - 37, 0x20, 0, 0x9eff)
		
		if objA0.value32 > 180
		{
			if global.framecounter % 2 == 0
				Renderer.drawCustomSprite("icecapzone_ringshooter_trail", px, py - ((objA0.value32 - 180) * 15), 0x10, 0, 0x9eff)
			if level.framecounter & 0x05
				playSound(0xca)
		}
		
		Renderer.drawCustomSprite("icecapzone_ringshooter_countdown", px - 50, py - 37, 0x20, 0, 0x9eff)
	}
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

//# address-hook(0x01be46) end(0x01bfae)
function void SetupCharacterAtStartPosition()
{
	if !(checkpoint.number != 0) && (global.zone_act == 0x0600) && !coldPeaksZone.skippedCPZ
	{
		if coldPeaksZone.destroyMechaTails()
		{
			u16[0xffffb000 + 0x10] = 0x00b0
			u16[0xffffb000 + 0x14] = 0x0440
			camera.position.x.u16 = 0x0000
			camera.position.y.u16 = 0x0400
			u8[0xffffb000 + 0x20] = char.state.DISAPPEARED
			u8[0xffffb000 + 0x2a] |= char.flag.IN_AIR
		}
		else
		{
			u16[0xffffb000 + 0x10] = 0x0070 + 24
			u16[0xffffb000 + 0x14] = 0x0280
			camera.position.x.u16 = 0x0000
			camera.position.y.u16 = 0x0300
			u8[0xffffb000 + 0x2a] |= char.flag.IN_AIR
			u8[0xffffb000 + 0x20] = char.state.ROLLING
			Audio.playAudio("coldpeakszone.mechatails.dash")
		}
	}
	else base.SetupCharacterAtStartPosition()
}

//# address-hook(0x039a40) end(0x039a7e)
function void fn039a40()
{
	if !coldPeaksZone.skippedCPZ
	{
		if timer.seconds > 1
			UnloadObject()
		coldPeaksZone.loadMechaTailsPalette(false, false)
		u16[0xffffb04a + 0x10] = 0x0300
		u16[0xffffb04a + 0x14] = 0x0300
		tails.respawn_counter = 0
		tails.ai_routine = 0x02
		if coldPeaksZone.destroyMechaTails()
		{
			s16[0xffffb000 + 0x18]
			s16[0xffffb000 + 0x1a] = 0x1000
			player1.control_override = 0xff
			if !(u8[0xffffb000 + 0x2a] & char.flag.IN_AIR)
			{
				player1.control_override = 0x00
				UnloadObject()
			}
		}
		
		if s16[0xffffb000 + 0x1a] < 0xc00 && u16[0xffffb000 + 0x10] == 0x0070 + 24
		{
			if !(u8[0xffffb000 + 0x2a] & char.flag.IN_AIR)
				UnloadObject()
			coldPeaksZone.spawnMechaTailsCutsceneObject()
			s16[0xffffb000 + 0x1a] = 0xc00
		}
	}
	else base.fn039a40()
}

//# address-hook(0x053f22) end(0x053fa2)
function void UpdateLevelTiles.LBZ1()
{
	if timer.seconds < 1
	{
		if u8[0xffffb000 + 0x20] == char.state.DISAPPEARED
		{
			if global.framecounter % 2 == 0
			{
				SpriteHandle iceCapZone.ringShooterTrail = Renderer.addSpriteHandle("icecapzone_ringshooter_trail", u16[0xffffb000 + 0x10], u16[0xffffb000 + 0x14], 0x9e00)
				iceCapZone.ringShooterTrail.setFlags(0x20)
			}
			if level.framecounter & 0x05
				playSound(0xca)
		}
		else player1.control_override = 0x00
	}
	base.UpdateLevelTiles.LBZ1()
}

//LBZ Morning palette stuff, made by Nabbup

global bool startedLBZ1Fade = false
global u8 LBZ1FadeProgress = 0x00
global bool startedLBZ2Fade = false
global u8 LBZ2FadeProgress = 0x00

// init variables for lbz1
//# address-hook(0x053e96) end(0x053f1e)
function void InitLevelTiles.LBZ1()
{
	if coldPeaksZone.skippedCPZ == 1 && !Mods.isModActive("nighttime-launch-base-zone") && (Game.isSecretUnlocked(0x13))
	{
		startedLBZ1Fade = false
		if (checkpoint.number < 5)
			LBZ1FadeProgress = 0x00
		else
			LBZ1FadeProgress = 0xff
	}
	base.InitLevelTiles.LBZ1()
}

// init variables for lbz2
//# address-hook(0x054348) end(0x054368)
function void InitLevelTiles.LBZ2()
{
	base.InitLevelTiles.LBZ2()
	// reset lbz1 fading just in case
	if coldPeaksZone.skippedCPZ == 1 && !Mods.isModActive("nighttime-launch-base-zone") && (Game.isSecretUnlocked(0x13))
	{
		LBZ1FadeProgress = 0x00
		startedLBZ1Fade = false
		LBZ2FadeProgress = 0x00
		startedLBZ2Fade = false
	}
}

//# address-hook(0x053f22) end(0x053fa2)
function void UpdateLevelTiles.LBZ1()
{
	if coldPeaksZone.skippedCPZ == 1 && !Mods.isModActive("nighttime-launch-base-zone") && (Game.isSecretUnlocked(0x13))
	{
		if (isMainCharacter(CHARACTER_KNUCKLES) && u16[0xffffeec4] == 0x55 && !startedLBZ1Fade)
		{
			startedLBZ1Fade = true
			LBZ1FadeProgress = 0x00
		}
	}
	base.UpdateLevelTiles.LBZ1()
	if coldPeaksZone.skippedCPZ == 1 && !Mods.isModActive("nighttime-launch-base-zone") && (Game.isSecretUnlocked(0x13))
	{
		handleUseottPalettes.LBZ1()
		if (startedLBZ1Fade)
			handleLBZ1Fade()
	}
}

function void copyPaletteDataFromTable(u8 index, u16 ramAddress)
{
	base.copyPaletteDataFromTable(index, ramAddress)
	if (index == 0x17) && coldPeaksZone.skippedCPZ == 1
		handleUseottPalettes.LBZ2()
}

//# address-hook(0x05436c) end(0x054378)
function void UpdateLevelTiles.LBZ2()
{
	base.UpdateLevelTiles.LBZ2()
	if coldPeaksZone.skippedCPZ == 1 && !Mods.isModActive("nighttime-launch-base-zone") && (Game.isSecretUnlocked(0x13))
	{
		handleUseottPalettes.LBZ2()
		if (startedLBZ2Fade)
			handleLBZ2Fade()
	}
}

// tower crumbling in lbz1
//# address-hook(0x053ff8) end(0x0540ce)
function void fn053ff8()
{
	if (s16[0xffffeec4] < 0) && coldPeaksZone.skippedCPZ == 1 && !Mods.isModActive("nighttime-launch-base-zone") && (Game.isSecretUnlocked(0x13))
	{
		startedLBZ1Fade = true
		LBZ1FadeProgress = 0x00
	}
	base.fn053ff8()
}

// entering eggmobile in lbz2
//# address-hook(0x08d2b6) end(0x08d33e)
function void fn08d2b6()
{
	base.fn08d2b6()
	if (objA0.update_address == 0x08d370) && coldPeaksZone.skippedCPZ == 1 && !Mods.isModActive("nighttime-launch-base-zone") && (Game.isSecretUnlocked(0x13))
		startedLBZ2Fade = true
}

function void handleUseottPalettes.LBZ1()
{
	if u8[0xfffffe24] < 10 && u8[0xffffb005] >= 0x06
		return
	u64 key = "lbz1_dusk"
	if (LBZ1FadeProgress != 0)
		key = "lbz1_dawn"
	u16 numColors = System.loadExternalPaletteData(key, 0, 0x800000, 0x20)

	for (u8 i = 0; i < numColors; ++i)
	{
		if (i > 8 && i < 12)
			continue
		u32 rgba = u32[0x800000 + i * 4]
		if (rgba & 0xff000000)
		{
			if (globalComponentTintColorR == 0xff)
					u16[0xfffffc40 + i * 2] = packColorExt(rgba)
			else
				u16[0xfffffcc0 + i * 2] = packColorExt(rgba)
		}
	}
}

function void handleUseottPalettes.LBZ2()
{
	if (LBZ2FadeProgress != 0)
		return
	u64 key = "lbz2_dawn"
	u16 numColors = System.loadExternalPaletteData(key, 0, 0x800000, 0x20)

	for (u8 i = 0; i < numColors; ++i)
	{
		if (i > 8 && i < 12)
			continue
		u32 rgba = u32[0x800000 + i * 4]
		if (rgba & 0xff000000)
		{
			if (globalComponentTintColorR == 0xff)
					u16[0xfffffc40 + i * 2] = packColorExt(rgba)
			else
				u16[0xfffffcc0 + i * 2] = packColorExt(rgba)
		}
	}
}

function void handleLBZ2Fade()
{
	if (LBZ2FadeProgress == 0xff)
		return
	u32 address = 0xfffffc40
	u32 addressStart = 0x0A931C
	u64 key = "lbz2_dawn"
	u16 numColors = System.loadExternalPaletteData(key, 0, 0x800000, 0x20)

	for (u8 i = 0; i < numColors; ++i)
	{
		if (i > 11 && i < 16)
			continue
		u32 rgba = u32[0x800000 + i * 4]
		if (rgba & 0xff000000)
			u16[address + i * 2] = blendColorsPacked(packColorExt(rgba), u16[addressStart + i * 2], LBZ2FadeProgress)
	}
	LBZ2FadeProgress = min(u16(LBZ2FadeProgress + 4), 0xff)
}

function void handleLBZ1Fade()
{
	if (globalComponentTintColorR != 0xff)
		return
	u64 key = "lbz1_dusk"
	u16 numColors = System.loadExternalPaletteData(key, 0, 0x800000, 0x20)
	u64 key2 = "lbz1_dawn"
	u16 numColors2 = System.loadExternalPaletteData(key2, 0, 0x800080, 0x20)
	for (u8 i = 0; i < numColors; ++i)
	{
		if (i > 8 && i < 12)
			continue
		u32 rgba = u32[0x800000 + i * 4]
		u32 rgba2 = u32[0x800080 + i * 4]
		if (rgba & 0xff000000 && rgba2 & 0xff000000)
			u16[0xfffffc40 + i * 2] = blendColorsPacked(packColorExt(rgba), packColorExt(rgba2), LBZ1FadeProgress)
	}
	LBZ1FadeProgress = min(u16(LBZ1FadeProgress + 4), 0xff)
}

global u8 isOnColdPeaksZone
global u8 customZoneSelect.useMode1Alts = 1
global u8 customZoneSelect.alternateZoneSet = 0

//# address-hook(0x085e3a) end(0x085e50)
function void TriggerNextZone()
{
#if STANDALONE
	Standalone.onLevelFinished()
	if isOnColdPeaksZone == 0 && global.zone == 0x05 && !coldPeaksZone.skippedCPZ
	{
		isOnColdPeaksZone = 1
		D0.u16 = 0x0500
	}
	else
	{
		if isOnColdPeaksZone == 1
			isOnColdPeaksZone = 0
		D0.u16 = Game.onTriggerNextZone(D0.u16)
	}

	// Decide on the next zone's start location -- either the default or an alternative one
	//  - 0 is the default
	//  - 1 is Sonic's and Tails' path
	//  - 2 is Knuckles' path
	level.start_location = 0
	if (D0.u16 == 0x0300)
	{
		// MGZ -> CNZ
		level.start_location = (camera.position.y.u16 < 0x0600) ? 2 : 1
	}
	else if (D0.u16 == 0x0500)
	{
		// CNZ -> ICZ
		level.start_location = (camera.position.y.u16 > 0x0300) ? 2 : 1
	}

	if (Game.getSetting(SETTING_MAINTAIN_SHIELDS))
	{
		global.shields_backup_1 = u8[0xffffb000 + 0x2b] & char.bonus.ALL_SHIELDS
	}
#endif

	// Trigger the fade out and loading of next zone
	global.zone_act = D0.u16
	global.zone_act.apparent = D0.u16
	level.restart = 1
	checkpoint.number = 0
	global.stage_type = 0

#if STANDALONE
	Standalone.onLevelStart()
#endif
}

//# address-hook(0x01c362) end(0x01c388)
function void fn01c362()
{
	base.fn01c362()

	if isOnColdPeaksZone == 1 && global.zone_act == 0x0500
	{
	#if STANDALONE
		Standalone.loadRawLevelData("cpz1_layout", global.zone_act, 0xffff8000)
	#endif
	}
	else isOnColdPeaksZone = 0
}

function void LevelRingsTableBuilder.buildRings()
{
	base.LevelRingsTableBuilder.buildRings()
	if isOnColdPeaksZone == 1 && global.zone_act == 0x0500
	{
		u32 bytes = Standalone.loadRawLevelData("cpz1_rings", global.zone_act, 0x814000)
	}
}

function void LevelObjectTableBuilder.buildObjects()
{
	base.LevelObjectTableBuilder.buildObjects()
	if isOnColdPeaksZone == 1 && global.zone_act == 0x0500
	{
		u32 bytes = Standalone.loadRawLevelData("cpz1_objects", global.zone_act, 0x810000)
	}
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	if isOnColdPeaksZone == 1
	{
		if (objA0.update_address == 0x02d95c) && (objA0.animation.sprite == 0x09)
		{	
			SpriteHandle titlecard = Renderer.addSpriteHandle("coldPeaksZone_titlecard", objA0.position.x.u16, 96, 0x9ffe)
			titlecard.setFlags(0x40|0x80)
			return true
		}
	}
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

global u16 coldPeaksZone.mechaTails.position.x
global u16 coldPeaksZone.mechaTails.position.y
global u8 coldPeaksZone.mechaTails.introTimer
global u8 coldPeaksZone.mechaTails.hitsRemaining
global u8 coldPeaksZone.mechaTails.damageTimer
global u8 coldPeaksZone.mechaTails.hasBeenFought
global u16 coldPeaksZone.mechaTails.resultsTimer

global bool coldPeaksZone.mechaTails.charHasCollided
global bool coldPeaksZone.mechaTails.isCharging
global bool coldPeaksZone.mechaTails.holdingSnowball

global u8 coldPeaksZone.bossSprite

//Mecha Tails' other code
function void coldPeaksZone.mechaTailsStuff()
{
	coldPeaksZone.skippedCPZ = 0
	
	if level.restart
		return
	
	if (allocDynamicObjectStd()) && coldPeaksZone.mechaTails.introTimer == 9
	{
		// Create the object that fades out level music and starts the boss theme afterwards
		objA1.update_address = 0x085b30
		u8[A1 + 0x2c] = MUSIC_MAINBOSS
	}
	if coldPeaksZone.mechaTails.introTimer == 0x7c
	{
		coldPeaksZone.loadMechaTailsPalette(false, false)
		coldPeaksZone.spawnMechaTailsObject()
	}
	
	if coldPeaksZone.mechaTails.hitsRemaining != 0
	{
		if camera.position.y.u16 < 0x0490
			camera.position.y.u16 = 0x0490
		if camera.position.x.u16 >= 0x6023
			move_area.left = 0x6023
		move_area.right = 0x6023 + getScreenExtend() * 2
		level.boss_encounter = 1
	}
	else if coldPeaksZone.mechaTails.hasBeenFought == 1
	{
		move_area.left = 0x6023
		if !level.results_done
			move_area.right = 0x6023 + getScreenExtend() * 2
		else move_area.right = 0x6bf0
		level.boss_encounter = 0
	}
}

//Mecha Tails
function void coldPeaksZone.spawnMechaTailsObject()
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = addressof(coldPeaksZone.updateMechaTailsObject)
		
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE | render_flag.FLIP_X)
		
		objA1.box_size.x = 0x40
		objA1.box_size.y = 0x40
		
		objA1.position.x.u16 = 0x6190 - 40 + getScreenExtend()
		objA1.position.y.u16 = 0x0466
		
		objA1.base_state = 0x00
		objA1.state = 0x00
		
		coldPeaksZone.mechaTails.hitsRemaining = 0x0c
		u8[A1 + 0x29] = 0x0d //13 hits
	}
}

//# address-hook(0x200400)
function void coldPeaksZone.updateMechaTailsObject()
{
	coldPeaksZone.mechaTails.position.x = objA0.position.x.u16
	coldPeaksZone.mechaTails.position.y = objA0.position.y.u16
	
	objA0.box_size.x = 0x40
	objA0.box_size.y = 0x40
	
	objA0.hitbox_extends.x = 16
	objA0.hitbox_extends.y = 16
	
	DrawObject()
	
	if objA0.velocity.x < 0
		objA0.render_flags |= render_flag.FLIP_X
	else if objA0.velocity.x > 0
		objA0.render_flags &= ~render_flag.FLIP_X
	
	if objA0.base_state == 0x01 || (objA0.base_state == 0x03 && (objA0.state == 0x01 || objA0.state == 0x03))
		objA0.collision_attributes = (collision.size.32x32 | collision.flag.THREAT)
	else objA0.collision_attributes = (collision.size.32x32 | collision.flag.DESTRUCTIBLE)
	
	if u8[A0 + 0x29] > 0 && objA0.base_state != 0x04 && !coldPeaksZone.mechaTails.damageTimer
	{
		coldPeaksZone.checkForCollision(0xffffb000)
		coldPeaksZone.checkForCollision(0xffffb04a)
	}
	
	if coldPeaksZone.mechaTails.hitsRemaining == 0 && u16[0xffffb000 + 0x10] < (0x6588 + getScreenExtend() - 40)
	{
		objA0.base_state = 0x04
		if coldPeaksZone.mechaTails.resultsTimer < 90
			coldPeaksZone.mechaTails.resultsTimer += 1
		if coldPeaksZone.mechaTails.resultsTimer >= 90
		{
			level.default_music.u8 = 0x0b
			if coldPeaksZone.destroyMechaTails()
			{
				coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, 0x130, -0x300, 4)
				coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, -0x130, -0x300, 3)
				coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, 0xa0, -0x400, 2)
				coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, -0xa0, -0x400, 1)
				coldPeaksZone.mechaTails.hasBeenFought = 1
				coldPeaksZone.mechaTails.position.y = 0x0546
				UnloadObject()
			}
			else
			{
				if coldPeaksZone.mechaTails.position.y < 0x0546
				{
					UpdateMovementStraightSimple()
					objA0.velocity.y += 0x20
				}
				else coldPeaksZone.mechaTails.hasBeenFought = 1
			}
		}
		if coldPeaksZone.mechaTails.resultsTimer >= 90
		{
			if coldPeaksZone.mechaTails.position.y >= 1347 && coldPeaksZone.mechaTails.resultsTimer == 92 && level.wait_for_results == 0
			{
				player2.control_override = 0xff
				if u16[0xffffb04a + 0x10] > (coldPeaksZone.mechaTails.position.x + 32)
				{
					control.tails = 0x0400
				}
				else if u16[0xffffb04a + 0x10] < (coldPeaksZone.mechaTails.position.x + 24)
				{
					control.tails = 0x0800
				}
				else if u16[0xffffb04a + 0x10] >= (coldPeaksZone.mechaTails.position.x + 24) && u16[0xffffb04a + 0x10] < (coldPeaksZone.mechaTails.position.x + 32)
				{
					if u8[0xffffb04a + 0x2a] & char.flag.FACING_LEFT
						control.tails = 0x0200
					else control.tails = 0x0800
				}
			}
		}
	}
	
	if objA0.base_state == 0x00
	{
		if objA0.position.y.u16 < 0x04c0
		{
			UpdateMovementStraightSimple()
			objA0.velocity.y += 0x07
		}
		else
		{
			if objA0.velocity.y > 0
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y -= 0x20
			}
			else
			{
				Audio.playAudio("coldpeakszone.mechatails.dash")
				objA0.base_state = 0x01
			}
		}
	}
	
	if objA0.base_state == 0x01
	{
		u16 speed = (u8[A0 + 0x29] < 0x05) ? 0xa00 : 0x700
		u16 turn = (u8[A0 + 0x29] < 0x05) ? 20 : 32
		
		objA0.velocity.y = 0
		if objA0.state == 0x00
		{
			UpdateMovementStraightSimple()
			if objA0.velocity.x > -speed
				objA0.velocity.x -= 0x20
			else objA0.velocity.x = -speed
			if objA0.position.x.u16 < 0x600f - 40 + getScreenExtend()
			{
				objA0.position.y.u16 += turn
				objA0.velocity.x = -objA0.velocity.x
				objA0.state = 0x01
				Audio.playAudio("coldpeakszone.mechatails.dash")
			}
		}
		if objA0.state == 0x01
		{
			UpdateMovementStraightSimple()
			if objA0.velocity.x < speed
				objA0.velocity.x += 0x20
			else objA0.velocity.x = speed
			if objA0.position.x.u16 > 0x61c4 - 40 + getScreenExtend()
			{
				if objA0.position.y.u16 >= 0x0532
				{
					coldPeaksZone.switchPattern()
				}
				else
				{
					objA0.position.y.u16 += turn
					objA0.velocity.x = -objA0.velocity.x
					objA0.state = 0x00
					Audio.playAudio("coldpeakszone.mechatails.dash")
				}
			}
		}
	}
	if objA0.base_state == 0x02
	{
		if objA0.countdown_value == 0
			objA0.countdown_value = 45
		objA0.countdown_value -= 1
		
		if coldPeaksZone.mechaTails.hitsRemaining < 4
		{
			if objA0.position.y.u16 < 0x04da
			{
				objA0.velocity.y = 0x200
			}
			else
			{
				if objA0.velocity.y > 0
					objA0.velocity.y -= 0x30
				else objA0.velocity.y = 0
			}

			if objA0.countdown_value == 18
			{
				playSound(0x54)
				coldPeaksZone.spawnLaser()
			}
		}
		else
		{
			if objA0.countdown_value == 1
			{
				playSound(0x5E)
				coldPeaksZone.spawnEnergyBall()
			}
		}
		if objA0.state == 0x00
		{
			UpdateMovementStraightSimple()
			objA0.velocity.x = -0x200
			if objA0.position.x.u16 < 0x600f - 40 + getScreenExtend()
			{
				objA0.state = 0x01
			}
		}
		if objA0.state == 0x01
		{
			UpdateMovementStraightSimple()
			objA0.velocity.x = 0x200
			if objA0.position.x.u16 > 0x61c4 - 40 + getScreenExtend()
			{
				coldPeaksZone.switchPattern()
			}
		}
	}
	if objA0.base_state == 0x03
	{
		if objA0.state == 0x00
		{
			if objA0.velocity.x < 0x30
			{
				UpdateMovementStraightSimple()
				objA0.velocity.x += 0x0a
			}
			else
			{
				objA0.velocity.x = 0
				Audio.playAudio("dropdash_charge", AudioContext.CONTEXT_SOUND)
				objA0.state = 0x01
			}
		}
		if objA0.state == 0x01
		{
			CheckGroundCollision()
			if !(D1.s16 <= 0)
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y += 0x28
				objA0.velocity.x = 0
			}
			else
			{
				if objA0.velocity.x == 0
				{
					coldPeaksZone.spawnDropDashDust(true)
					Audio.playAudio("dropdash_release", AudioContext.CONTEXT_SOUND)
				}
				if objA0.position.x.u16 > 0x600f
				{
					UpdateMovementStraightSimple()
					objA0.velocity.y = 0x00
					objA0.velocity.x = -0x840
				}
				else 
				{
					objA0.position.y.u16 = 0x04d5 + (coldPeaksZone.lowerMechaTailsPosition() ? 16 : 0)
					objA0.velocity.x = 0x200
					objA0.state = 0x02
				}
			}
		}
		if objA0.state == 0x02
		{
			if objA0.velocity.x > -0x30
			{
				UpdateMovementStraightSimple()
				objA0.velocity.x -= 0x0a
			}
			else
			{
				objA0.velocity.x = 0
				Audio.playAudio("dropdash_charge", AudioContext.CONTEXT_SOUND)
				objA0.state = 0x03
			}
		}
		if objA0.state == 0x03
		{
			CheckGroundCollision()
			if !(D1.s16 <= 0)
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y += 0x28
				objA0.velocity.x = 0
			}
			else
			{
				if objA0.position.x.u16 < 0x61c4 - 40 + getScreenExtend()
				{
					if objA0.velocity.x == 0
					{
						coldPeaksZone.spawnDropDashDust(false)
						Audio.playAudio("dropdash_release", AudioContext.CONTEXT_SOUND)
					}
					UpdateMovementStraightSimple()
					objA0.velocity.y = 0x00
					objA0.velocity.x = 0x840
				}
				else
				{
					coldPeaksZone.switchPattern()
				}
			}
		}
	}
	if objA0.base_state == 0x04
	{
		if objA0.velocity.x > 0
			objA0.velocity.x -= 0x60
		if objA0.velocity.x < 0
			objA0.velocity.x += 0x60
	}
	
	if objA0.base_state == 0x05
	{
		if objA0.state == 0x00
		{
			if objA0.countdown_value == 59
				coldPeaksZone.spawnSnowball()
			if objA0.countdown_value > 0
				objA0.countdown_value -= 1
			UpdateMovementStraightSimple()

			if objA0.velocity.y > 0
				objA0.velocity.y -= 0x20
			else objA0.velocity.y = 0
			
			if objA0.countdown_value == 0
			{
				objA0.state = 0x01
				objA0.countdown_value = 130
				playSound(0x9d)
			}
		}
		else if objA0.state == 0x01
		{
			if objA0.countdown_value > 0
				objA0.countdown_value -= 1
			objA0.position.x.u16 = u16[0xffffb000 + 0x10]
			if objA0.countdown_value == 0
			{
				objA0.countdown_value = 60
				objA0.state = 0x02
				playSound(0x51)
			}
		}
		else if objA0.state == 0x02
		{
			if objA0.countdown_value > 0
				objA0.countdown_value -= 1
			if objA0.countdown_value == 0
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y -= 0x20
				if objA0.position.y.u16 < 0x0466
				{
					if (coldPeaksZone.mechaTails.hitsRemaining < 4 && objA0.value26 == 0) || coldPeaksZone.mechaTails.hitsRemaining >= 4
						objA0.value26 = 1
					else objA0.value26 = 0
					if objA0.value26 == 1
					{
						objA0.velocity.y = 0
						objA0.velocity.x = 0
						objA0.position.x.u16 = 0x61c4 - 40 + getScreenExtend()
						coldPeaksZone.switchPattern()
					}
					else
					{
						objA0.state = 0x00
						objA0.countdown_value = 60
						objA0.position.x.u16 = 0x60e5 - 40 + getScreenExtend()
						objA0.position.y.u16 = 0x0466 + (coldPeaksZone.lowerMechaTailsPosition() ? 16 : 0)
						objA0.velocity.x = 0x000
						objA0.velocity.y = 0x500
						objA0.value26 = 0
					}
				}
			}
		}
	}
	
	if objA0.base_state == 0x05 && objA0.state <= 0x01
		coldPeaksZone.mechaTails.holdingSnowball = 1
	else coldPeaksZone.mechaTails.holdingSnowball = 0
	
	if coldPeaksZone.mechaTails.resultsTimer == 1
	{
		spawnChildObject(0x083d84, 0x00, 0, 0)		// Boss explosion generator
	}
	
	if coldPeaksZone.mechaTails.damageTimer > 0
		coldPeaksZone.mechaTails.damageTimer -= 1
	
	if coldPeaksZone.mechaTails.charHasCollided && !coldPeaksZone.mechaTails.damageTimer && coldPeaksZone.mechaTails.hitsRemaining
	{
		if !(objA0.base_state == 0x01 || (objA0.base_state == 0x03 && (objA0.state == 0x01 || objA0.state == 0x03)))
		{
			if coldPeaksZone.mechaTails.hitsRemaining == 1
			{
				coldPeaksZone.mechaTails.hitsRemaining -= 1
				coldPeaksZone.mechaTails.damageTimer = 30
				coldPeaksZone.mechaTails.hasBeenFought = 1
				AddScoreForBossEnemy()
				hud.dirty.timer = 0
				objA0.base_state = 0x04
			}
			else
			{
				if coldPeaksZone.mechaTails.hitsRemaining == 4
				{
					coldPeaksZone.loadMechaTailsPalette(true, false)
					playSound(0x84)
				}
				if !Audio.isPlayingAudio("3db_boss2") && coldPeaksZone.mechaTails.hitsRemaining <= 4
					Audio.playAudio("3db_boss2", 0)
				coldPeaksZone.mechaTails.hitsRemaining -= 1
				coldPeaksZone.mechaTails.damageTimer = 60
			}
			playSound(0x6E)
		}
		coldPeaksZone.mechaTails.charHasCollided = 0
	}
	
	if coldPeaksZone.mechaTails.introTimer > 0x0b
	{
		if (u8[A0 + 0x29] < (coldPeaksZone.mechaTails.hitsRemaining + 1) && !coldPeaksZone.mechaTails.damageTimer && u8[A0 + 0x29] > 0)
			coldPeaksZone.mechaTails.charHasCollided = 1
		else u8[A0 + 0x29] = coldPeaksZone.mechaTails.hitsRemaining + 1
	}
}

function void coldPeaksZone.switchPattern()
{
	if (global.framecounter / 2) % 4 == 0 && objA0.base_state != 0x02
	{
		objA0.position.x.u16 = 0x61c4 - 40 + getScreenExtend()
		objA0.position.y.u16 = 0x04d5 + (coldPeaksZone.lowerMechaTailsPosition() ? 16 : 0)
		objA0.base_state = 0x02
		objA0.state = 0x00
	}
	else if (global.framecounter / 2) % 4 == 1 && objA0.base_state != 0x03
	{
		objA0.position.x.u16 = 0x61c4 - 40 + getScreenExtend()
		objA0.position.y.u16 = 0x04d5 + (coldPeaksZone.lowerMechaTailsPosition() ? 16 : 0)
		objA0.velocity.x = -0x200
		objA0.base_state = 0x03
		objA0.state = 0x00
	}
	else if (global.framecounter / 2) % 4 == 2 && objA0.base_state != 0x01
	{
		Audio.playAudio("coldpeakszone.mechatails.dash")
		objA0.position.x.u16 = 0x61c4 - 40 + getScreenExtend()
		objA0.position.y.u16 = 0x04d6
		objA0.velocity.x = -0x700
		objA0.state = 0
		objA0.base_state = 0x01
	}
	else if (global.framecounter / 2) % 4 == 3 && objA0.base_state != 0x05
	{
		objA0.base_state = 0x05
		objA0.state = 0x00
		objA0.countdown_value = 60
		objA0.position.x.u16 = 0x60e5 - 40 + getScreenExtend()
		objA0.position.y.u16 = 0x0466 + (coldPeaksZone.lowerMechaTailsPosition() ? 16 : 0)
		objA0.velocity.x = 0x000
		objA0.velocity.y = 0x500
	}
}

function bool coldPeaksZone.lowerMechaTailsPosition()
{
	if getMainCharacter() == CHARACTER_KNUCKLES
		return true
	return false
}

function bool coldPeaksZone.destroyMechaTails()
{
	if getMainCharacter() == CHARACTER_KNUCKLES
		return true
	return false
}

function void coldPeaksZone.checkForCollision(u32 address)
{
	if (checkBoxOverlap(u16[address + 0x10] - 8, u16[address + 0x14] - (u8[address + 0x1e] - 3), 16, u8[address + 0x1e] * 2, objA0.position.x.u16 - objA0.hitbox_extends.x, objA0.position.y.u16 - objA0.hitbox_extends.y, objA0.hitbox_extends.x * 2, objA0.hitbox_extends.y * 2))
	{
		A1 = address
		coldPeaksZone.handleMechaTailsCollision()
	}
}

function void coldPeaksZone.handleMechaTailsCollision()
{
	A2 = A0		// Backup enemy update address from A0 to A2
	A0 = A1		// Copy player update address from A1 to A0
	if !coldPeaksZone.mechaTails.damageTimer
	{
		A1 = A2
		Character.OnCollisionWithDynamicObject()		// Run collision code
	}
	A0 = A2		// Copy enemy update address back from A2 to A0
}

//Energy Orb
function void coldPeaksZone.spawnEnergyBall()
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = addressof(coldPeaksZone.updateEnergyBall)
		
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
		
		objA1.box_size.x = 24
		objA1.box_size.y = 24
		
		objA1.position.x.u16 = coldPeaksZone.mechaTails.position.x
		objA1.position.y.u16 = coldPeaksZone.mechaTails.position.y
		
		objA1.velocity.y = 0x600
	}
}

//# address-hook(0x200402)
function void coldPeaksZone.updateEnergyBall()
{
	objA0.box_size.x = 0x40
	objA0.box_size.y = 0x40
	
	objA0.hitbox_extends.x = 12
	objA0.hitbox_extends.y = 12
	
	objA0.collision_attributes = (collision.size.24x24 | collision.flag.THREAT)
	
	UpdateMovementStraightSimple()
	objA0.velocity.y += 0x20
	
	DrawObject()
	
	if !(objA0.render_flags & render_flag.VISIBLE)
		UnloadObject()
	
	coldPeaksZone.checkForCollision(0xffffb000)
	coldPeaksZone.checkForCollision(0xffffb04a)
}

//Laser
function void coldPeaksZone.spawnLaser()
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = addressof(coldPeaksZone.updateLaser)
		
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
		
		objA1.box_size.x = 24
		objA1.box_size.y = 24
		
		objA1.position.x.u16 = coldPeaksZone.mechaTails.position.x
		objA1.position.y.u16 = coldPeaksZone.mechaTails.position.y
	}
}

//# address-hook(0x200404)
function void coldPeaksZone.updateLaser()
{
	objA0.box_size.x = 0x40
	objA0.box_size.y = 0x40
	
	objA0.hitbox_extends.x = 12
	objA0.hitbox_extends.y = 12
	
	objA0.collision_attributes = (collision.size.24x24 | collision.flag.THREAT)
	
	objA0.position.x.u16 = coldPeaksZone.mechaTails.position.x
	objA0.position.y.u16 = coldPeaksZone.mechaTails.position.y + 24
	
	DrawObject()
	
	if !(objA0.render_flags & render_flag.VISIBLE)
		UnloadObject()
	
	if !coldPeaksZone.mechaTails.isCharging
		UnloadObject()
	
	if (checkBoxOverlap(u16[0xffffb000 + 0x10] - 8, u16[0xffffb000 + 0x14] - (u8[0xffffb000 + 0x1e] - 3), 16, u8[0xffffb000 + 0x1e] * 2, objA0.position.x.u16 - objA0.hitbox_extends.x, objA0.position.y.u16 - objA0.hitbox_extends.x, objA0.hitbox_extends.x * 2, 128))
	{
		A1 = 0xffffb000
		coldPeaksZone.handleMechaTailsCollision()
	}
	
	if (checkBoxOverlap(u16[0xffffb04a + 0x10] - 8, u16[0xffffb04a + 0x14] - (u8[0xffffb04a + 0x1e] - 3), 16, u8[0xffffb04a + 0x1e] * 2, objA0.position.x.u16 - objA0.hitbox_extends.x, objA0.position.y.u16 - objA0.hitbox_extends.x, objA0.hitbox_extends.x * 2, 128))
	{
		A1 = 0xffffb04a
		coldPeaksZone.handleMechaTailsCollision()
	}
}

//Drop Dash Dust
function void coldPeaksZone.spawnDropDashDust(bool flip)
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = addressof(coldPeaksZone.updateDropDashDust)
		
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
		
		if flip
			objA1.render_flags |= render_flag.FLIP_X
		
		objA1.box_size.x = 24
		objA1.box_size.y = 24
		
		objA1.position.x.u16 = coldPeaksZone.mechaTails.position.x
		objA1.position.y.u16 = coldPeaksZone.mechaTails.position.y
		
		objA1.base_state = 0x00
		
		objA1.flags2e = 60
	}
}

//# address-hook(0x200406)
function void coldPeaksZone.updateDropDashDust()
{
	DrawObject()
	if objA0.countdown_value == 0x3c00
		objA0.countdown_value = 4
	
	if objA0.countdown_value > 0
		objA0.countdown_value -= 1

	if objA0.countdown_value == 0
	{
		objA0.countdown_value = 4
		objA0.base_state += 1
	}
	if objA0.base_state == 0x05
		UnloadObject()
}

//Snowball
function void coldPeaksZone.spawnSnowball()
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = addressof(coldPeaksZone.updateSnowball)
		
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
		
		objA1.box_size.x = 64
		objA1.box_size.y = 64
		
		objA1.position.x.u16 = coldPeaksZone.mechaTails.position.x
		objA1.position.y.u16 = coldPeaksZone.mechaTails.position.y - 32
		
		objA1.velocity.y = 0x600
	}
}

//# address-hook(0x200408)
function void coldPeaksZone.updateSnowball()
{
	objA0.box_size.x = 72
	objA0.box_size.y = 72
	
	objA0.hitbox_extends.x = 32
	objA0.hitbox_extends.y = 32
	
	objA0.collision_attributes = (collision.size.32x32 | collision.flag.THREAT)
	
	if !coldPeaksZone.mechaTails.holdingSnowball
	{
		UpdateMovementStraightSimple()
		objA0.velocity.y += 0x39
	}
	else
	{
		objA0.position.x.u16 = coldPeaksZone.mechaTails.position.x
		objA0.position.y.u16 = coldPeaksZone.mechaTails.position.y - 32
		if coldPeaksZone.mechaTails.hitsRemaining == 0
		{
			UpdateMovementStraightSimple()
			objA0.velocity.y = 0x40
		}
	}
	
	DrawObject()
	
	if objA0.position.y.u16 >= 0x0546
	{
		coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, 0x200, -0x500, false)
		coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, -0x200, -0x500, false)
		coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, 0x100, -0x600, false)
		coldPeaksZone.spawnSnowballParticles(objA0.position.x.u16, objA0.position.y.u16, -0x100, -0x600, false)
		UnloadObject()
	}
	
	if coldPeaksZone.mechaTails.hitsRemaining > 0
	{
		coldPeaksZone.checkForCollision(0xffffb000)
		coldPeaksZone.checkForCollision(0xffffb04a)
	}
}

//Snowball Particles - used for boss giblets as well
function void coldPeaksZone.spawnSnowballParticles(u16 pos.x, u16 pos.y, s16 speed.x, s16 speed.y, bool shouldBeMechaTailsGibletsInstead)
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = addressof(coldPeaksZone.updateSnowballParticles)
		
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
		
		objA1.box_size.x = 24
		objA1.box_size.y = 24
		
		objA1.position.x.u16 = pos.x
		objA1.position.y.u16 = pos.y
		
		objA1.velocity.x = speed.x
		objA1.velocity.y = speed.y
		
		if shouldBeMechaTailsGibletsInstead
			objA1.base_state = shouldBeMechaTailsGibletsInstead
	}
}

//# address-hook(0x20040a)
function void coldPeaksZone.updateSnowballParticles()
{
	objA0.box_size.x = 12
	objA0.box_size.y = 12
	
	objA0.hitbox_extends.x = 12
	objA0.hitbox_extends.y = 12
	
	objA0.collision_attributes = (collision.size.24x24 | collision.flag.THREAT)
	
	UpdateMovementStraightSimple()
	objA0.velocity.y += 0x40
	
	DrawObject()
	
	if !(objA0.render_flags & render_flag.VISIBLE)
	{
		UnloadObject()
	}
	
	/*if coldPeaksZone.mechaTails.hitsRemaining > 0
	{
		coldPeaksZone.checkForCollision(0xffffb000)
		coldPeaksZone.checkForCollision(0xffffb04a)
	}*/
}

function void coldPeaksZone.callSignpost1()
{
	if (allocDynamicObjectStd())
	{
		objA1.update_address = addressof(coldPeaksZone.callSignpost2)
		
		objA1.position.x.u16 = coldPeaksZone.mechaTails.position.x
		objA1.position.y.u16 = coldPeaksZone.mechaTails.position.y
	}
}

//# address-hook(0x20040c)
function void coldPeaksZone.callSignpost2()
{
	objA0.position.x.u16 = coldPeaksZone.mechaTails.position.x
	objA0.position.y.u16 = coldPeaksZone.mechaTails.position.y
	fn085ba8()
}


//# address-hook(0x085bda) end(0x085bf6)
function void fn085bda()
{
	if global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		playMusic(0x0b)
		objA0.update_address = 0x085c00
		level.boss_encounter = 0

		spawnSimpleChildObjects(addressof(SignPost.BaseUpdate), 1)		// Signpost

		addPatternLoadingCue(0x085bc8)		// Signpost pole sprite
	}
	else base.fn085bda()
}

//# address-hook(0x085da8) end(0x085dd8)
function void fn085da8()
{
	if global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		
	}
	else base.fn085da8()
}

//Cutscene Mecha Tails
function void coldPeaksZone.spawnMechaTailsCutsceneObject() //Used in LBZ as well
{
	if (allocDynamicObjectStd())
	{
		if coldPeaksZone.destroyMechaTails()
		{
			//Use an different object, for Knuckles' unique cutscene
			objA1.update_address = addressof(coldPeaksZone.updateKnucklesCutsceneObject)
			
			objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
			
			objA1.box_size.x = 0x40
			objA1.box_size.y = 0x40
			
			objA1.position.x.u16 = u16[0xffffb000 + 0x10]
			objA1.position.y.u16 = u16[0xffffb000 + 0x14]
			
			objA1.base_state = 0x00
			objA1.state = 0x00
		}
		else
		{
			objA1.update_address = addressof(coldPeaksZone.updateMechaTailsCutsceneObject)
			
			objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
			
			objA1.box_size.x = 0x40
			objA1.box_size.y = 0x40
			
			objA1.position.x.u16 = 0x6190
			objA1.position.y.u16 = 0x0466
			
			objA1.base_state = 0x00
			objA1.state = 0x00
		}
	}
}

//# address-hook(0x200414)
function void coldPeaksZone.updateKnucklesCutsceneObject()
{
	objA0.box_size.x = 12
	objA0.box_size.y = 12
	
	objA0.hitbox_extends.x = 12
	objA0.hitbox_extends.y = 12
	
	DrawObject()
	
	if coldPeaksZone.loadedPatterns == 0
		UnloadObject()
	
	if objA0.base_state == 0
	{
		if u16[0xffffb000 + 0x10] >= 0x6c00
		{
			u8[0xffffb000 + 0x46] = 0x0e
			u8[0xffffb000 + 0x47] = 0x0f
			if !player1.control_override
			{
				player1.control_override = 0xff
				playSound(0x87)
				control.player1 = 0x0000
				u8[0xffffb000 + 0x05] = base_state.HURT
				u8[0xffffb000 + 0x20] = char.state.GOT_HURT_PANIC
				u8[0xffffb000 + 0x2a] |= char.flag.IN_AIR
				s16[0xffffb000 + 0x18] = 0x100
				s16[0xffffb000 + 0x1a] = -0x400
			}
			else
			{
				if !(u8[0xffffb000 + 0x2a] & char.flag.IN_AIR)
				{
					objA0.base_state = 1
					playSound(0x82)
				}
			}
		}
		objA0.position.x.u16 = u16[0xffffb000 + 0x10]
		objA0.position.y.u16 = u16[0xffffb000 + 0x14]
	}
	if objA0.base_state == 1
	{
		if objA0.value26 < 64
			objA0.value26 += 8
		objA0.position.y.u16 = u16[0xffffb000 + 0x14] - objA0.value26
		
		objA0.value32 += 1
		
		if objA0.value32 == 120 || objA0.value32 == 60 || objA0.value32 == 2
			playSound(0xa7)
		if objA0.value32 == 180
			playSound(0xad)
		
		if objA0.value32 > 180
		{
			if global.framecounter % 2 == 0
				Renderer.drawCustomSprite("icecapzone_ringshooter_trail", u16[0xffffb000 + 0x10], u16[0xffffb000 + 0x14] - ((objA0.value32 * 15) - (180 * 15)), 0x10, 0x20, 0x9e00)
			if level.framecounter & 0x05
				playSound(0xca)
			
			u8[0xffffb000 + 0x20] = char.state.DISAPPEARED
		}
		
		if objA0.value32 == 200
			TriggerNextZone(0x0600)
	}
}

//# address-hook(0x20040e)
function void coldPeaksZone.updateMechaTailsCutsceneObject()
{
	objA0.box_size.x = 0x40
	objA0.box_size.y = 0x40
	
	objA0.hitbox_extends.x = 16
	objA0.hitbox_extends.y = 16
	
	if !(objA0.base_state == 0 && global.zone == 0x05)
		DrawObject()
	
	if global.zone == 0x06
	{
		UpdateMovementStraightSimple()
		if objA0.base_state == 0
		{
			objA0.position.x.u16 = u16[0xffffb000 + 0x10] - 24
			objA0.position.y.u16 = u16[0xffffb000 + 0x14]
			objA0.velocity.y = s16[0xffffb000 + 0x1a]
			
			player1.control_override = 0xff
			control.player1 = 0x0000
			s16[0xffffb000 + 0x18] = 0
			
			if u16[0xffffb000 + 0x14] >= 0x0500
				objA0.base_state = 1
		}
		if objA0.base_state == 1
		{
			player1.control_override = 0x00
			s16[0xffffb000 + 0x18] = 0x300
			s16[0xffffb000 + 0x1a] = -0x300
			objA0.base_state = 2
		}
		
		if objA0.position.y.u16 >= 0x05c0
		{
			if Mods.isModActive("Triple Trouble 16-bit Effects") && System.getGlobalVariableValueByName("option.object_screenshake")
				playSound(0x5f)
			else playSound(0x59)
			camera.screenshake.state = 0x14
			UnloadObject()
		}
	}
	else
	{
		u8[0xffffb000 + 0x46] = 0x0c
		u8[0xffffb000 + 0x47] = 0x0d
		
		if coldPeaksZone.loadedPatterns == 0
			UnloadObject()
		
		if objA0.base_state > 0x00 && !(objA0.base_state == 0x01 && objA0.position.x.u16 < u16[0xffffb000 + 0x10])
		{
			camera.use_forced_target = true
			camera.forced_target.x = objA0.position.x.u16
			if objA0.base_state >= 0x03
				camera.forced_target.y = objA0.value42		
			else camera.forced_target.y = objA0.position.y.u16
		}
		
		if objA0.base_state == 0x00
		{
			if u16[0xffffb000 + 0x10] > 0x68d3
			{
				objA0.position.x.u16 = u16[0xffffb000 + 0x10] - 400
				objA0.position.y.u16 = u16[0xffffb000 + 0x14]
			}
			if u16[0xffffb000 + 0x10] >= 0x6c00
			{
				coldPeaksZone.loadMechaTailsPalette(false, false)
				Audio.playAudio("coldpeakszone.mechatails.dash")
				objA0.base_state = 0x01
			}
		}
		if objA0.base_state == 0x01
		{
			if u16[0xffffb000 + 0x10] > 0x68d3
				objA0.position.y.u16 = u16[0xffffb000 + 0x14]
			if objA0.position.x.u16 < u16[0xffffb000 + 0x10] - 0x20
			{
				UpdateMovementStraightSimple()
				objA0.velocity.x = 0x2000
			}
			else
			{	
				coldPeaksZone.surpriseflashTransparency = 1
				Audio.playAudio("kc_surprise", 0)
				hud.dirty.timer = 0
				playSound(0x59)
				objA0.base_state = 0x02
				objA0.velocity.x = 0
				objA0.countdown_value = 180
			}
		}
		if objA0.base_state == 0x02
		{
			SpriteHandle coldpeakszone.surpriseflash = Renderer.addSpriteHandle("coldPeaksZone.mechaTails.other.surpriseflash", 0, 0, 0xc001)
			coldpeakszone.surpriseflash.setPriorityFlag(1)
			coldpeakszone.surpriseflash.setOpacity(coldPeaksZone.surpriseflashTransparency)
			
			u8[0xffffb000 + 0x2e] |= control_flag.DISABLE_UPDATE
			u8[0xffffb000 + 0x20] = char.state.GOT_HURT_PANIC
			u16[0xffffb000 + 0x10] = objA0.position.x.u16 + 24
			u16[0xffffb000 + 0x14] = objA0.position.y.u16 - 14
			
			if objA0.countdown_value > 0
				objA0.countdown_value -= 1
			
			if objA0.countdown_value > 90 && objA0.countdown_value <= 120
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y -= 0x15
			}
			else if objA0.countdown_value > 60 && objA0.countdown_value <= 90
			{
				if objA0.velocity.y < 0
				{
					UpdateMovementStraightSimple()
					objA0.velocity.y += 0x07
				}
			}
			else if objA0.countdown_value == 0
			{
				objA0.velocity.y = 0
				objA0.base_state = 0x03
				playSound(SFX_ROLL)
				objA0.countdown_value = 240
				objA0.value42 = objA0.position.y.u16
			}
		}
		if objA0.base_state == 0x03
		{
			if objA0.countdown_value > 0
				objA0.countdown_value -= 1
				
			u8[0xffffb000 + 0x2e] |= control_flag.DISABLE_UPDATE
			u8[0xffffb000 + 0x20] = char.state.ROLLING
			u16[0xffffb000 + 0x10] = objA0.position.x.u16 + 16
			u16[0xffffb000 + 0x14] = objA0.position.y.u16 - 6
			
			if objA0.countdown_value > 120 && objA0.countdown_value <= 180
			{
				UpdateMovementStraightSimple()
				objA0.velocity.y -= 0x20
			}
			else if objA0.countdown_value > 0 && objA0.countdown_value <= 120
			{
				if getMainCharacter() == CHARACTER_KNUCKLES
				{
					TriggerNextZone(0x0600)
					UnloadObject()
				}
				if global.framecounter % 4 == 0
					objA0.value42 -= 1
			}
			if objA0.countdown_value == 60
			{
				objA0.velocity.y = 0
				objA0.position.y.u16 = 0x027d - (0x029b - camera.position.y.u16)
				objA0.value3e = 0x029b - camera.position.y.u16
				objA0.base_state = 0x04
			}
		}
		if objA0.base_state == 0x04
		{
			if objA0.countdown_value > 0 && objA0.countdown_value <= 120
			{
				if global.framecounter % 4 == 0
					objA0.value42 -= 1
			}
			u8[0xffffb000 + 0x14] = 0x0281
			if global.framecounter % 2 == 0
				objA0.position.y.u16 += 1
			if objA0.position.y.u16 >= 0x02c0 - objA0.value3e
			{	
				TriggerNextZone(0x0600)
				UnloadObject()
			}
		}
	}
}

function void coldPeaksZone.loadMechaTailsPalette(bool pinch, bool justASingleColor)
{
	string paletteKey = ColdPeaksZone.getBossSpriteSheet()
	u16 numColors = System.loadExternalPaletteData(paletteKey, pinch, 0x800000, 0x20)
	
	if (numColors > 0)
	{
		for (u16 i = 0; i < numColors; ++i)
		{
			if justASingleColor
				u16[0x802000 + 0xc0 + 0x80 + 0x1e] = packColor(u32[0x800000 + 0x3c])
			else u16[0x802000 + 0xc0 + 0x80 + i * 2] = packColor(u32[0x800000 + i * 4])
		}
	}
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	string sheet = ColdPeaksZone.getBossSpriteSheet()
	if (objA0.update_address == 0x200402)
	{
		Renderer.drawCustomSprite("coldPeaksZone.mechaTails.other.energyball.3", px, py, 0xe0, 0, 0x9f02)
		if level.framecounter & 0x01
			Renderer.drawCustomSprite("coldPeaksZone.mechaTails.other.energyball.2", px, py, 0xe0, 0, 0x9f03)
		return true
	}
	if (objA0.update_address == 0x200404)
	{
		Renderer.drawCustomSprite("coldPeaksZone.mechaTails.other.laser", px, py, 0x00, 0, 0x9f02)
		return true
	}
	if (objA0.update_address == 0x200400)
	{
		if coldPeaksZone.mechaTails.damageTimer && (global.framecounter / 2) % 2 == 0
			u16[0x802000 + 0xde + 0x80] = 0x0eee
		else coldPeaksZone.loadMechaTailsPalette(coldPeaksZone.mechaTails.hitsRemaining < 4, true)
		
		if objA0.countdown_value < 20 && objA0.base_state == 0x02
			coldPeaksZone.mechaTails.isCharging = 1
		else coldPeaksZone.mechaTails.isCharging = 0
		
		string key
		if objA0.base_state == 0x01
			key = stringformat("dash.%d", (global.framecounter / 2) % 3 + 1)
		else if (objA0.base_state == 0x03 && (objA0.state == 0x01 || objA0.state == 0x03))
		{
			Renderer.drawCustomSprite(stringformat("coldPeaksZone.%s.tails.2", sheet), px, py, 0xe0, (objA0.render_flags & render_flag.FLIP_X), 0x9eff, -((global.framecounter * 16) % 256), 0xff)
			key = stringformat("roll.%d", (global.framecounter / 3) % 3 + 1)
		}
		else if coldPeaksZone.mechaTails.hitsRemaining < 4 && objA0.countdown_value < 20 && objA0.base_state == 0x02
		{
			if objA0.countdown_value < 20
				key = "laser"
		}
		else if objA0.countdown_value < 10 && objA0.base_state == 0x02
		{
			key = "charge.2"
			if level.framecounter & 0x01
				Renderer.drawCustomSprite("coldPeaksZone.mechaTails.other.energyball.1", px + (objA0.render_flags & render_flag.FLIP_X ? -1 : 1), py + 6, 0xe0, (objA0.render_flags & render_flag.FLIP_X), 0x9f01)
		}
		else if objA0.countdown_value < 20 && objA0.base_state == 0x02
		{
			key = "charge.1"
			if level.framecounter & 0x01
				Renderer.drawCustomSprite("coldPeaksZone.mechaTails.other.energyball.1", px + (objA0.render_flags & render_flag.FLIP_X ? -2 : 2), py + 5, 0xe0, (objA0.render_flags & render_flag.FLIP_X), 0x9f01)
		}
		else if objA0.base_state == 0x04
		{
			if coldPeaksZone.mechaTails.resultsTimer < 90
			{
				coldPeaksZone.loadMechaTailsPalette(false, false)
				key = "defeat.3"
			}
			else if coldPeaksZone.mechaTails.position.y < 0x0546
				key = "defeat.1"
			else key = "defeat.2"
		}
		else if objA0.base_state == 0x05
		{
			if objA0.state <= 0x01
				key = "snowball.1"
			else key = "snowball.2"
		}
		else
			key = "idle"
		Renderer.drawCustomSprite(stringformat("coldPeaksZone.%s.%s", sheet, key), px, py, 0xe0, (objA0.render_flags & render_flag.FLIP_X), 0x9eff)
		if !(objA0.base_state == 0x03 && (objA0.state == 0x01 || objA0.state == 0x03)) && objA0.base_state != 0x01 && objA0.base_state != 0x04 && !(coldPeaksZone.mechaTails.hitsRemaining < 4 && objA0.countdown_value < 20 && objA0.base_state == 0x02)
			coldPeaksZone.renderMechaTailsTails(px, py, sheet)
		return true
	}
	if (objA0.update_address == 0x200406)
	{
		string key
		key = stringformat("coldPeaksZone.mechaTails.other.dropdashdust.%d", 1 + objA0.base_state)
		Renderer.drawCustomSprite(key, px, py, 0xe0, (objA0.render_flags & render_flag.FLIP_X), 0x9e00)
	}
	if (objA0.update_address == 0x200408)
	{
		Renderer.drawCustomSprite("coldPeaksZone.mechaTails.other.snowball.big", px, py, 0x20, (objA0.render_flags & render_flag.FLIP_X), 0x9d7e)
		return true
	}
	if (objA0.update_address == 0x20040a)
	{
		string key
		key = stringformat("giblet.%d", objA0.base_state)
		if objA0.base_state > 0
			Renderer.drawCustomSprite(stringformat("coldPeaksZone.%s.%s", sheet, key), px, py, 0xe0, (objA0.render_flags & render_flag.FLIP_X), 0x9f01)
		else Renderer.drawCustomSprite("coldPeaksZone.mechaTails.other.snowball.small", px, py, 0x20, (objA0.render_flags & render_flag.FLIP_X), 0x9d7e)
		return true
	}
	if (objA0.update_address == 0x20040e)
	{
		string key
		if objA0.base_state == 0x01
			key = stringformat("dash.%d", (global.framecounter / 2) % 3 + 1)
		else if objA0.base_state == 0x02
			key = "cutscene.1"
		else if objA0.base_state == 0x03 && objA0.countdown_value > 120 && objA0.countdown_value <= 180
			key = stringformat("cutscene.%d", (global.framecounter / 2) % 2 + 3)
		else if objA0.base_state == 0x04
		{
			px = 0 -(camera.position.x.u16 / 16) + getScreenExtend() + 1850
			key = stringformat("dashgfx.%d", (global.framecounter / 2) % 2 + 1)
			sheet = "mechaTails" //Without this, the game gives an error since this sprite doesn't exist for Faker Tails
		}
		else key = "cutscene.2"
		if global.zone_act == 0x0600
		{
			objA0.render_flags |= render_flag.FLIP_Y
			key = "cutscene.1"
			if global.framecounter % 2 == 0
				Renderer.drawCustomSprite("coldPeaksZone.mechaTails.dashgfx.3", px, py, 0xe0, 0, 0x9f01)
		}
		Renderer.drawCustomSprite(stringformat("coldPeaksZone.%s.%s", sheet, key), px, py, 0xe0, (objA0.render_flags & render_flag.FLIP_X) | (objA0.render_flags & render_flag.FLIP_Y), 0x9f01)
		if objA0.base_state != 0x04
			coldPeaksZone.renderMechaTailsTails(px - 3, py, sheet)
		return true
	}
	if (objA0.update_address == 0x200414) && (objA0.base_state > 0)
	{
		Renderer.drawCustomSprite("icecapzone_teleportercannon", px, py, 0x20, 0, 0x9f01)
		
		string key
		if ((240 - objA0.value32) / 60) < 4
			key = stringformat("icecapzone_teleporter_countdown%d", (240 - Math.roundToInt(objA0.value32)) / 60)
		else key = "icecapzone_teleporter_countdown4"
		if global.framecounter % 2 == 0
			Renderer.drawCustomSprite(key, px - 50, py, 0x20, 0, 0x9f01)
		
		Renderer.drawCustomSprite("icecapzone_ringshooter_countdown", px - 50, py, 0x20, 0, 0x9f01)
		return true
	}
	if (objA0.update_address == 0x083f68) && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		string key
		key = stringformat("coldPeaksZone.mechaTails.other.explosion.%d", objA0.animation.sprite + 1)
		Renderer.drawCustomSprite(key, px, py, 0x00, (objA0.render_flags & render_flag.FLIP_X), renderQueue)
		return true
	}
	if objA0.update_address == 0x01abb6 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		return true
	}
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function void coldPeaksZone.renderMechaTailsTails(s16 px, s16 py, string sheet)
{
	Renderer.drawCustomSprite(stringformat("coldPeaksZone.%s.tails.1", sheet), px, py + 5, 0xe0, (objA0.render_flags & render_flag.FLIP_X), 0x9eff, -((global.framecounter * 12) % 256), 0xff)
}

function string ColdPeaksZone.getBossSpriteSheet()
{
	return ColdPeaksZone.getBossSpriteSheet[coldPeaksZone.bossSprite]
}

constant array<string> ColdPeaksZone.getBossSpriteSheet =
{
	"mechaTails",
	"fakerTails"
}

global u8 coldpeakszone.isFrozen
global u8 coldpeakszone.is2PFrozen
global u8 coldpeakszone.breakingOutAnimTimer
global u8 coldpeakszone.breakingOutAnimTimerP2

//# post-update-hook
function void PostFrameUpdate()
{
	if global.game_mode != 0x0c || u8[0xffffb000 + 0x05] >= base_state.DIED
	{
		coldpeakszone.isFrozen = 0
		coldpeakszone.is2PFrozen = 0
		coldpeakszone.breakingOutAnimTimer = 0
		coldpeakszone.breakingOutAnimTimerP2 = 0
	}
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		System.setGlobalVariableValueByName("UniqueFrozenSprites.isFrozen", coldpeakszone.isFrozen)
		System.setGlobalVariableValueByName("UniqueFrozenSprites.is2PFrozen", coldpeakszone.is2PFrozen)
		
		if player1.control_override == 0x00
			coldpeakszone.isFrozen = 0
		
		if player2.control_override == 0x00
			coldpeakszone.is2PFrozen = 0
	}
	base.PostFrameUpdate()
}

//# address-hook(0x08a9e0)
function void fn08a9e0()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		if (u8[A4 + 0x2e] == 0)
		{
			if (u8[A4 + 0x34] < 60 && u8[A4 + 0x05] < base_state.HURT) && ((coldpeakszone.isFrozen == 0 && A4 == 0xffffb000) || (coldpeakszone.is2PFrozen == 0 && A4 == 0xffffb04a))
			{
				Audio.playAudio("coldpeakszone.Freeze")
				u16[A4 + 0x1c] = 0
				u8[A4 + 0x2a] |= 0x02
				if !(u8[0xffffb04a + 0x38] == 1 && u8[0xffffE654] != 0)
					u8[A4 + 0x2e] = (control_flag.DISABLE_ANIMATION)
				if u8[A4 + 0x38] == 0
				{
					u8[A4 + 0x20] = char.state.GOT_HURT
					u8[A4 + 0x22] = 0x8d
				}
				else if u8[A4 + 0x38] == 1
				{
					u8[A4 + 0x20] = char.state.GOT_HURT
					u8[A4 + 0x22] = 0x8a
				}
				else
				{
					u8[A4 + 0x20] = char.state.GOT_HURT
					u8[A4 + 0x22] = 0x8d
				}
				u8[A4 + 0x3d] = 0

				D4 = D0
				{
					// "spawnChildObjects(0x08aae2)" replaced by:
					spawnChildObject(0x08a7ae, 0x00, 0, 0)
				}
				D0 = D4
				u16[A1 + 0x44] = A4.u16
			}
		}
		if u8[A4 + 0x20] == char.state.GOT_HURT || u8[A4 + 0x20] == char.state.DIED
		{
			if A4 == 0xffffb04a
				coldpeakszone.is2PFrozen = 1
			else coldpeakszone.isFrozen = 1
		}
	}
	else base.fn08a9e0()
}

//# address-hook(0x08a748) end(0x08a758)
function void fn08a748()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		objA0.update_address = 0x08a75c
		setupObjectAttributesFull(0x08aa96)
	}
	else base.fn08a748()
}

//# address-hook(0x08a78c)
function void fn08a78c()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		objA0.update_address = 0x08a7a2
		objA0.countdown_value = 0
	}
	else base.fn08a78c()
}

//# address-hook(0x08a7a2) end(0x08a7aa)
function void fn08a7a2()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		CheckDistanceToPlayers()
		if !(D2.u16 < 0xa0)
			UnloadObject()
		A1 = 0x08aa30
		fn08a9c6()
	}
	else base.fn08a7a2()
}

//# address-hook(0x08a656) end(0x08a67a)
function void Freezer.Update()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		CheckDistanceToPlayers()
		if (D2.u16 < 0xa0)
		{
			objA0.update_address = 0x08a67e
			objA0.countdown_value = 0
			u16[A0 + 0x30] = 0
			objA0.value39 = 0
			playSound(0x7f)
		}
		Enemy.DrawOrUnload()
	}
	else base.Freezer.Update()
}

//# address-hook(0x08a67e) end(0x08a6da)
function void fn08a67e()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		CheckDistanceToPlayers()
		if (D2.u16 < 0xa0)
		{
			--u16[A0 + 0x30]
			if (s16[A0 + 0x30] < 0)
			{
				D0 = objA0.value39 ^ 0x02
				objA0.value39 = D0.u8
				u16[A0 + 0x30] = u16[0x08a6de + D0.u16]

				call 0x08a6ee
			}

			if (objA0.flags38 & 0x02)
			{
				--objA0.countdown_value
				if (objA0.countdown_value < 0)
				{
					objA0.countdown_value = 0x01
					fn08a708()
				}
			}
		}
		else
		{
			objA0.update_address = addressof(Freezer.Update)
			objA0.flags38 &= ~0x02
			playSound(0xe4)
		}
		Enemy.DrawOrUnload()
	}
	else base.fn08a67e()
}

//# address-hook(0x08a708) end(0x08a718)
function void fn08a708()
{
	A2 = (objA0.render_flags & render_flag.FLIP_Y) ? 0x08aaca : 0x08aac2
	SpawnChildObjects()
}

function u32 Game.getSetting(u32 settingId)
{
	if settingId == SETTING_PLAYER2_OFFSCREEN && tails.control_counter <= 30 && global.zone_act == 0x0500 && isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
		return false
	return base.Game.getSetting(settingId)
}

//# address-hook(0x08a84c)
function void fn08a84c()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		A1 = 0xffff0000 + u16[A0 + 0x44]
		D0.u16 = objA0.position.x.u16
		D1.u16 = objA0.position.y.u16
		if (u8[A1 + 0x38] == CHARACTER_KNUCKLES)
		{
			D2 = (objA1.render_flags & render_flag.FLIP_X) ? 4 : -4
			D0.u16 += D2.u16
			D1.u16 += 2
		}
		
		objA0.position.x.u16 = objA1.position.x.u16
		objA0.position.y.u16 = objA1.position.y.u16
		
		if (A1 == 0xffffb000 && control.pad1.pressed & CONTROL_ABC) || (A1 == 0xffffb04a && control.pad2.pressed & CONTROL_ABC)
		{
			if (A1 == 0xffffb04a && control.pad2.pressed & CONTROL_ABC)
				coldpeakszone.breakingOutAnimTimerP2 = 4
			if objA0.countdown_value > 0x1f
				Audio.playAudio("coldpeakszone.Struggle")
			objA0.countdown_value -= 0x1f
		}
		u8[A1 + 0x2a] |= (char.flag.CONTROL_LOCK | char.flag.ROLLING)
		u8[A1 + 0x2e] = (control_flag.DISABLE_ANIMATION)
		u8[A1 + 0x40] = 0x00
		if A1 == 0xffffb04a
		{
			control.player2 = 0x0000
			control.tails = 0x0000
			player2.control_override = 0xff
		}
		else
		{
			control.player1 = 0x0000
			player1.control_override = 0xff
		}
		if u8[A1 + 0x38] == 0
		{
			u8[A1 + 0x20] = char.state.GOT_HURT
			u8[A1 + 0x22] = 0x8d
		}
		else if u8[A1 + 0x38] == 1
		{
			u8[A1 + 0x20] = char.state.GOT_HURT
			u8[A1 + 0x22] = 0x8a
		}
		else
		{
			u8[A1 + 0x20] = char.state.GOT_HURT
			u8[A1 + 0x22] = 0x8d
		}
		
		if coldpeakszone.isFrozen
		{
			if (u8[A1 + 0x2a] & char.flag.FACING_LEFT) && !(u8[A1 + 0x04] & render_flag.FLIP_X)
				u8[A1 + 0x2a] &= ~char.flag.FACING_LEFT
			else if !(u8[A1 + 0x2a] & char.flag.FACING_LEFT) && (u8[A1 + 0x04] & render_flag.FLIP_X)
				u8[A1 + 0x2a] |= char.flag.FACING_LEFT
		}
		
		if (objA0.countdown_value >= 0)
		{
			if A1 == 0xffffb04a
			{
				// When Tails is frozen, he will try to free himself if he isn't already controlled by Player 2
				if tails.control_counter == 0
					tails.control_counter = 30
				--tails.control_counter
				if coldpeakszone.is2PFrozen
				{
					if tails.control_counter == 0
					{
						control.pad2 = 0x2020
						if objA0.countdown_value > 0x1f
							Audio.playAudio("coldpeakszone.Struggle")
						objA0.countdown_value -= 0x1f
						tails.control_counter = 30
					}
					else
					{
						control.pad2 = 0x0000
					}
				}
			}
			fn08aa38()
			if (_equal())
			{
				DrawObject()
				return
			}
		}
		else
		{
			A1 = 0xffff0000 + u16[A0 + 0x44]
			A2 = A0
			A0 = A1
			if A0 == 0xffffb04a
				coldpeakszone.is2PFrozen = 0
			else coldpeakszone.isFrozen = 0
			objA0.velocity.y = -0x480
			objA0.state = char.state.ROLLING
			u8[A0 + 0x2a] |= 0x02
			u8[A0 + 0x2e] = 0
			u8[A0 + 0x34] = 0x40
			Audio.playAudio("coldpeakszone.Shatter")
			if A0 == 0xffffb04a
				player2.control_override = 0x00
			else player1.control_override = 0x00
			A0 = A2
		}

		A1 = 0xffff0000 + u16[A0 + 0x44]
		u8[A1 + 0x2a] |= 0x02
		u8[A1 + 0x2e] = 0
		u8[A1 + 0x34] = 0x78

		// Spawn broken ice block chunks
		// "spawnChildObjects(0x08aaea)" replaced by:
		spawnChildObject(0x08a8dc, 0x00, -12, -8)
		spawnChildObject(0x08a8dc, 0x02, -4, -8)
		spawnChildObject(0x08a8dc, 0x04, 4, -8)
		spawnChildObject(0x08a8dc, 0x06, 12, -8)
		spawnChildObject(0x08a8dc, 0x08, -12, 0)
		spawnChildObject(0x08a8dc, 0x0a, -4, 0)
		spawnChildObject(0x08a8dc, 0x0c, 4, 0)
		spawnChildObject(0x08a8dc, 0x0e, 12, 0)
		spawnChildObject(0x08a8dc, 0x10, -12, 8)
		spawnChildObject(0x08a8dc, 0x12, -4, 8)
		spawnChildObject(0x08a8dc, 0x14, 4, 8)
		spawnChildObject(0x08a8dc, 0x16, 12, 8)

		UnloadObject()
	}
	else base.fn08a84c()
}

//# address-hook(0x08aa38) end(0x08aa8c)
function void fn08aa38()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		A3 = 0xffffb000
		if (A3.u16 == u16[A0 + 0x44])
		{
			A3 = 0xffffb04a
		}

		_setZeroFlagByValue(0)
		if (s16[A3 + 0x1a] < 0)
			return

		if (u8[A3 + 0x20] != char.state.ROLLING && u8[A3 + 0x20] != char.state.SPINDASH)
			return

		A1 = 0x08aa8e
		fn0858f8()
		if (D0 == 0)
			return

		if (D0.u16 != 0)
		{
			player2.control_override = 0x00
			if coldpeakszone.is2PFrozen == 1
			{
				Audio.playAudio("coldpeakszone.Shatter")
				s16[0xffffb000 + 0x1a] = -0x480
				u8[0xffffb000 + 0x20] = char.state.ROLLING
				u8[0xffffb000 + 0x2a] |= 0x02
				u8[0xffffb000 + 0x2e] = 0
				u8[0xffffb000 + 0x34] = 0x40
			}
			coldpeakszone.is2PFrozen = 0
			A4 = 0xffff0000 + D0.u16
			if (u8[A4 + 0x2e] == 0)
			{
				s16[A3 + 0x1a] = -s16[A3 + 0x1a]
				_setZeroFlagByValue(1)
				return
			}
		}

		D0 = (D0 << 16) + (D0 >> 16)
		if (D0.u16 != 0)
		{
			player1.control_override = 0x00
			if coldpeakszone.isFrozen == 1
			{
				Audio.playAudio("coldpeakszone.Shatter")
				s16[0xffffb000 + 0x1a] = -0x480
				u8[0xffffb000 + 0x20] = char.state.ROLLING
				u8[0xffffb000 + 0x2a] |= 0x02
				u8[0xffffb000 + 0x2e] = 0
				u8[0xffffb000 + 0x34] = 0x40
			}
			coldpeakszone.isFrozen = 0
			A4 = 0xffff0000 + D0.u16
			if (u8[A4 + 0x2e] == 0)
			{
				s16[A3 + 0x1a] = -s16[A3 + 0x1a]
				_setZeroFlagByValue(1)
			}
		}
	}
	else base.fn08aa38()
}

function u64 Standalone.getModdedAnimationSpriteKey(u8 character, u16 animationSpriteEx)
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		if character == CHARACTER_TAILS && getMainCharacter() != CHARACTER_TAILS
		{
			if control.pad2.pressed & CONTROL_ABC
			{
				coldpeakszone.breakingOutAnimTimerP2 = 4
			}
			
			if coldpeakszone.breakingOutAnimTimerP2
			{
				coldpeakszone.breakingOutAnimTimerP2 -= 1
			}
		}
		else
		{
			if control.pad1.pressed & CONTROL_ABC
			{
				coldpeakszone.breakingOutAnimTimer = 4
			}
			
			if coldpeakszone.breakingOutAnimTimer
			{
				coldpeakszone.breakingOutAnimTimer -= 1
			}
		}
		if character == CHARACTER_SONIC
		{
			if u8[0xffffb000 + 0x20] != char.state.GOT_HURT
				coldpeakszone.isFrozen = 0
		}
		else if character == CHARACTER_TAILS
		{	
			if getMainCharacter() == CHARACTER_TAILS //tails why do you gotta be so complicated
			{
				if u8[0xffffb000 + 0x20] != char.state.GOT_HURT && u8[0xffffb000 + 0x20] != char.state.DIED
					coldpeakszone.isFrozen = 0
			}
			else
			{
				if u8[0xffffb04a + 0x20] != char.state.GOT_HURT
					coldpeakszone.is2PFrozen = 0
			}
		}
		else if character == CHARACTER_KNUCKLES
		{
			if u8[0xffffb000 + 0x20] != char.state.GOT_HURT
				coldpeakszone.isFrozen = 0
		}
	}
	return base.Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
}

//# address-hook(0x010294) end(0x010364)
function void Character.GettingHurt()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		if (A0 == 0xffffb000 && !coldpeakszone.isFrozen) || (A0 == 0xffffb04a && !coldpeakszone.is2PFrozen)
			base.Character.GettingHurt()
	}
	else base.Character.GettingHurt()
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0
	{
		if (((objA0.update_address == 0x08a84c) || (objA0.update_address == 0x08a80c)))
		{
			if objA0.countdown_value == 0x7f
			{
				SpriteHandle iceblock = Renderer.addSpriteHandle("coldpeakszone_iceblock_0x00", objA0.position.x.u16, (char.hitbox_extends.y == char.hitbox.y.UPRIGHT) ? objA0.position.y.u16 : objA0.position.y.u16 - 4, 0x9ffe)
				iceblock.setFlags(0x20)
				iceblock.setPaletteOffset(0x20)
				return true
			}
			else if (objA0.countdown_value >= 0x5f)
			{
				SpriteHandle iceblock = Renderer.addSpriteHandle("coldpeakszone_iceblock_0x01", objA0.position.x.u16, (char.hitbox_extends.y == char.hitbox.y.UPRIGHT) ? objA0.position.y.u16 : objA0.position.y.u16 - 4, 0x9ffe)
				iceblock.setFlags(0x20)
				iceblock.setPaletteOffset(0x20)
				return true
			}
			else if (objA0.countdown_value >= 0x3f)
			{
				SpriteHandle iceblock = Renderer.addSpriteHandle("coldpeakszone_iceblock_0x02", objA0.position.x.u16, (char.hitbox_extends.y == char.hitbox.y.UPRIGHT) ? objA0.position.y.u16 : objA0.position.y.u16 - 4, 0x9ffe)
				iceblock.setFlags(0x20)
				iceblock.setPaletteOffset(0x20)
				return true
			}
			else if (objA0.countdown_value >= 0x1f)
			{
				SpriteHandle iceblock = Renderer.addSpriteHandle("coldpeakszone_iceblock_0x03", objA0.position.x.u16, (char.hitbox_extends.y == char.hitbox.y.UPRIGHT) ? objA0.position.y.u16 : objA0.position.y.u16 - 4, 0x9ffe)
				iceblock.setFlags(0x20)
				iceblock.setPaletteOffset(0x20)
				return true
			}
			else
			{
				SpriteHandle iceblock = Renderer.addSpriteHandle("coldpeakszone_iceblock_0x04", objA0.position.x.u16, (char.hitbox_extends.y == char.hitbox.y.UPRIGHT) ? objA0.position.y.u16 : objA0.position.y.u16 - 4, 0x9ffe)
				iceblock.setFlags(0x20)
				iceblock.setPaletteOffset(0x20)
				return true
			}
		}
		if objA0.update_address == 0x08b384
		{
			if objA0.subtype2c == 1
			{
				SpriteHandle iceblock = Renderer.addSpriteHandle("coldpeakszone_iceblock_0x06", px, py, 0x9ffe)
				iceblock.setPaletteOffset(0x20)
			}
			else
			{
				SpriteHandle iceblock = Renderer.addSpriteHandle("coldpeakszone_iceblock_0x05", px, py, 0x9ffe)
				iceblock.setPaletteOffset(0x20)
			}
			return true
		}
		if objA0.update_address == 0x08a280 && objA0.subtype2c == 1
		{
			SpriteHandle icechunk = Renderer.addSpriteHandle("coldpeakszone_icechunk", px, py, 0x9ffe)
			icechunk.setPaletteOffset(0x20)
			return true
		}
	}
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

//# address-hook(0x08a280) end(0x08a2dc)
function void fn08a280()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && objA0.subtype2c == 1
	{
		// Ground speed of player 1 before the collision
		s16 speed = s16[0xffffb000 + 0x1c]
		s16 xvelocity = s16[0xffffb000 + 0x18]
		
		D1 = 0x2b
		D2 = 0x40
		D3 = 0x70
		D4.u16 = objA0.position.x.u16
		fn01dc56()
		
		if coldpeakszone.isFrozen
		{
			D6 = (D6 << 16) + (D6 >> 16)
			D6.u16 &= 0x01
			if (D6.u16 != 0)
			{
				spawnChildObjects(0x08aaea)		// Wall fragments

				Object.TriggerUnloading()
				Audio.playAudio("coldpeakszone.Shatter")
				DrawOrUnloadObject()

				s16[0xffffb000 + 0x18] = xvelocity
				s16[0xffffb000 + 0x1c] = speed
				u8[0xffffb000 + 0x2a] &= ~char.flag.PUSHING
				return
			}
		}

		A1 = 0xffff0000 + u16[0xfffffaa4]
		if (objA1.update_address == 0x089f38)
		{
			D0.u16 = objA1.position.x.u16
			D1.u16 = objA1.position.y.u16 & level.height.bitmask
			D2.u16 = objA0.position.x.u16
			D3.u16 = objA0.position.y.u16

			A2 = 0x08a2fc
			D2.u16 += u16[A2]
			if (D0.u16 >= D2.u16)
			{
				D2.u16 += u16[A2+2]
				if (D0.u16 < D2.u16)
				{
					D3.u16 += u16[A2+4]
					if (D1.u16 >= D3.u16)
					{
						D3.u16 += u16[A2+6]
						if (D1.u16 < D3.u16)
						{
							fn08a2e2()
							return
						}
					}
				}
			}
		}
		
		DrawOrUnloadObject()
	}
	else base.fn08a280()
}

//Bounseal
//# address-hook(0x08bade) end(0x08bade)
function void Penguin.Init()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		Object.InitWithUpdateAddress(addressof(coldPeaksZone.updateBounseal))
	}
	else base.Penguin.Init()
}

//# address-hook(0x200410)
function void coldPeaksZone.updateBounseal()
{
	objA0.box_size.x = 0x40
	objA0.box_size.y = 0x40
	
	objA0.hitbox_extends.x = 12
	objA0.hitbox_extends.y = 12
	
	objA0.collision_attributes = (collision.size.24x24 | collision.flag.DESTRUCTIBLE)
	
	if objA0.countdown_value > 0
		objA0.countdown_value -= 1
	
	UpdateMovementStraightSimple()
	objA0.velocity.y += 0x40
	
	CheckGroundCollision()
	if (D1.s16 <= 1)
	{
		if objA0.countdown_value == 0
		{
			objA0.velocity.x = (objA0.render_flags & render_flag.FLIP_X) ? 0x200 : -0x200 
			objA0.velocity.y = -0x600
			Audio.playAudio("coldpeakszone.bounseal.bounce")
			objA0.countdown_value = 10
		}
		else
		{
			objA0.velocity.y = 0
			objA0.velocity.x = 0
			CheckDistanceToPlayers()
			if D0 == 2
				objA0.render_flags |= render_flag.FLIP_X
			else objA0.render_flags &= ~render_flag.FLIP_X
		}
	}
	
	if !(D1.u8 == 0)
	{
		objA0.countdown_value = 10
	}
	
	D0 = u8[A0 + 0x29]
	if (D0.u8 == 0)
	{
		Enemy.DrawOrUnload()
		return
	}
	
	A1 = 0xffff0000 + u16[0x087910 + D0.u16 * 2]
	fn0857c2()
	if (_equal())
	{
		spawnChildObject(0x06b77c, 0x00, 0, 0)
		Object.TriggerUnloading()
	}
	else
	{
		DrawObject()
	}
}

//Blowler
//# address-hook(0x08be2e) end(0x08be2e)
function void StarPointer.Init()
{
	if isOnColdPeaksZone == 1 && customZoneSelect.alternateZoneSet == 0 && global.zone_act == 0x0500
	{
		Object.InitWithUpdateAddress(addressof(coldPeaksZone.updateBlowler))
	}
	else base.StarPointer.Init()
}

//# address-hook(0x200412)
function void coldPeaksZone.updateBlowler()
{
	objA0.box_size.x = 0x40
	objA0.box_size.y = 0x40
	
	objA0.hitbox_extends.x = 8
	objA0.hitbox_extends.y = 8
	
	objA0.collision_attributes = (collision.size.16x16 | collision.flag.DESTRUCTIBLE)
	objA0.sprite_priority = 0x200
	
	CheckDistanceToPlayers()
	if objA0.state == 0x00
	{
		if D0 == 2
			objA0.render_flags |= render_flag.FLIP_X
		else objA0.render_flags &= ~render_flag.FLIP_X
		
		UpdateMovementStraightSimple()
		if objA0.velocity.y < 0x100 && D1 == 2
			objA0.velocity.y += 0x40
		else if objA0.velocity.y > - 0x100 && D1 == 0
			objA0.velocity.y -= 0x40
		
		if objA0.velocity.x < -0x100
			objA0.velocity.x = -0x100
		else if objA0.velocity.x > 0x100
			objA0.velocity.x = 0x100
		
		objA0.velocity.x += (objA0.render_flags & render_flag.FLIP_X) ? 0x40 : -0x40
	}
	
	if (D2.u16 < 0x60 && D3.u16 < 0x20 && objA0.state == 0) || objA0.state == 1
		objA0.value32 += 1
	
	if objA0.value32 > 1 && objA0.value32 < 180
	{
		objA0.state = 0x01
	}
	else
	{
		objA0.value3e = 0
		objA0.state = 0x00
	}
	
	if objA0.value32 > 360	
		objA0.value32 = 0
	
	if objA0.state == 1
	{
		playSoundRepeatedly(0xda)
		if global.framecounter % 24 == 0
			coldPeaksZone.spawnBlowlerWind(objA0.render_flags & render_flag.FLIP_X)
		if D2.u16 < 0x80 && D3.u16 < 0x20 && !(u8[A1 + 0x20] == char.state.KNUX_FLYCLIMB && s16[A1 + 0x18] == 0)
		{
			if (objA0.render_flags & render_flag.FLIP_X)
			{
				if D0 == 2
				{
					if s16[A1 + 0x18] < 0
						s16[A1 + 0x18] = 0
					else s16[A1 + 0x18] += 0x30
					
					if s16[A1 + 0x1c] < 0
						s16[A1 + 0x1c] = 0
					else s16[A1 + 0x1c] += 0x30
				}
			}
			else
			{
				if D0 == 0
				{
					if s16[A1 + 0x18] > 0
						s16[A1 + 0x18] = 0
					else s16[A1 + 0x18] -= 0x30
					
					if s16[A1 + 0x1c] > 0
						s16[A1 + 0x1c] = 0
					else s16[A1 + 0x1c] -= 0x30
				}
			}
		}
	}
	
	D0 = u8[A0 + 0x29]
	if (D0.u8 == 0)
	{
		Enemy.DrawOrUnload()
		return
	}
	
	A1 = 0xffff0000 + u16[0x087910 + D0.u16 * 2]
	fn0857c2()
	if (_equal())
	{
		spawnChildObject(0x06b77c, 0x00, 0, 0)
		Object.TriggerUnloading()
	}
	else
	{
		DrawObject()
	}
}
function void coldPeaksZone.spawnBlowlerWind(bool flip)
{
	if (allocDynamicObjectStd())
	{
		objA1.position.x.u16 = objA0.position.x.u16
		objA1.position.y.u16 = objA0.position.y.u16 - 8 + global.framecounter % 16
		objA1.update_address = addressof(coldPeaksZone.updateBlowlerWind)
		objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)
		if flip
			objA1.render_flags |= render_flag.FLIP_X
		objA1.value32 = 100
	}
}

//# address-hook(0x200416)
function void coldPeaksZone.updateBlowlerWind()
{
	DrawObject()
	
	UpdateMovementStraightSimple()
	
	if (objA0.render_flags & render_flag.FLIP_X)
		objA0.velocity.x += 0x60
	else objA0.velocity.x -= 0x60
	
	if objA0.value32 > 0
		objA0.value32 -= 1

	if abs(objA0.velocity.x) > 0xe00
		UnloadObject()
	if !(objA0.render_flags & render_flag.VISIBLE)
		UnloadObject()
}

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	if objA0.update_address == 0x200410
	{
		string key
		if objA0.countdown_value == 10
			key = stringformat("coldPeaksZone.bounseal_0x0%d", 2 + (global.framecounter / 10) % 2)
		else key = stringformat("coldPeaksZone.bounseal_0x0%d", (global.framecounter / 10) % 2)
		Renderer.drawCustomSprite(key, px, py, 0x10, (objA0.render_flags & render_flag.FLIP_X), renderQueue)
	}
	if objA0.update_address == 0x200412
	{
		string key
		if objA0.state == 0x01 && (global.framecounter / 4) % 2 == 0
			Renderer.drawCustomSprite("coldPeaksZone.blowler_0x02", px, py, 0x10, (objA0.render_flags & render_flag.FLIP_X) | 0x40, renderQueue)
		key = stringformat("coldPeaksZone.blowler_0x0%d", (global.framecounter / 10) % 2)
		Renderer.drawCustomSprite(key, px, py, 0x10, (objA0.render_flags & render_flag.FLIP_X) | 0x40, renderQueue)
		if global.framecounter % 2 == 0
			Renderer.drawCustomSprite("coldPeaksZone.blowler_0x03", px, py, 0x10, (objA0.render_flags & render_flag.FLIP_X) | 0x40, renderQueue)
	}
	if objA0.update_address == 0x200416
	{
		SpriteHandle wind = Renderer.addSpriteHandle("coldPeaksZone.blowler_0x04", px, py, renderQueue)
		wind.setFlags(0x40)
		wind.setBlendMode(3)
		wind.setPaletteOffset(0x10)
	}
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function string ActSelect.GetZoneName(u8 zoneNumber)
{
	if zoneNumber == 14
		return "Cold Peaks Zone"
	return base.ActSelect.GetZoneName(zoneNumber)
}

function u8 ActSelect.GetNumActs(u8 zoneNumber)
{
	if zoneNumber == 14
		return 1
	return base.ActSelect.GetNumActs(zoneNumber)
}

function u8 ActSelect.GetNumZones()
{
	u8 numZones = ActSelect.ZONES.length() + 1
	if (!Game.isSecretUnlocked(SECRET_DOOMSDAY_ZONE))
		numZones -= 2
	else if (!Game.isSecretUnlocked(0x13))
		--numZones
	return numZones
}

function u16 ActSelect.TranslateZoneAct(u8 zoneNumber, u8 act)
{
	if (zoneNumber == 14)	// Special handling for CPZ: Enforce return value 0x0500 even though zone is 0xcf
	{
		isOnColdPeaksZone = 1
		return 0x0500
	}
	return base.ActSelect.TranslateZoneAct(zoneNumber, act)
}